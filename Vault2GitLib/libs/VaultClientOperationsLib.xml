<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultClientOperationsLib</name>
    </assembly>
    <members>
        <member name="T:VaultClientOperationsLib.TreeNodeEventHandler">
            <summary>
            Delegate for functions to handle tree cache's node added, node removed,
            node changed, node cloak status changed events.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.TreeNodeChangesBeginEndEventHandler">
            <summary>
            Delegate for beginning and ending tree changes.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.TreeCache">
            <summary>
            TreeCache manages the local cache of the repository structure we fetched
            from the server.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.#ctor(System.Int32,System.String,System.String,System.String,VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create an instance of a TreeCache, which is used to persist tree information
            to disk between sessions.
            </summary>
            <param name="repID">The ID of the repository this cache represents.</param>
            <param name="username">The username used to access this repository.</param>
            <param name="uniqueRepositoryID">The repository's GUID (get it from a server's returned VaultRepositoryInfo instance).</param>
            <param name="localStoreBasePath">The local base path used to store persistent files.  Use null if you don't care to persist any cache data between instances.</param>
            <param name="ci">The ClientInstance used for this connection.  Use null if you don't care for local deletions to be tracked.</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.Save">
            <summary>
            Saves any cache members that need saved.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.Load">
            <summary>
            Load all the CacheMember members from disk
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.SaveRepositoryIfNothingOnDisk">
            <summary>
            Saves the repository cache member if there is currently nothing on disk.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.ChangeSetItems_BeginChanges">
            <summary>
            Manually begin a change set to the change set items.  Calling this
            function is not required before calling the other ChangeSetItems
            methods in this class, but will cause all the changes made between it
            and ChangeSetItems_EndChanges to be saved only once (when
            ChangeSetItems_EndChanges is called).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.ChangeSetItems_EndChanges">
            <summary>
            Manually end a change set to the pending local deletions.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.RevertPendingChangeRepository">
            <summary>
            Reverts the pending change repository to mirror the last-known server repository
            by applying reverse deltas for each relevant changeset item.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateRepositoryWithInternalChangeSet(VaultClientOperationsLib.ChangeSetItemColl,System.Boolean)">
            <summary>
            Called during full refresh.  If it's a refresh performed immediately after a commit, itemsToIgnore contains the committed ChangeSetItems.
            </summary>
            <param name="itemsToIgnore">Items that were committed and can therefore be ignored.</param>
            <param name="isRefresh">This is being called by a refresh</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetFakeCSIAccountingForMoveAndRename(VaultClientOperationsLib.ChangeSetItemNamespaceChange,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl,VaultClientOperationsLib.ChangeSetItemNamespaceChange@)">
            <summary>
            </summary>
            <param name="csiNSC"></param>
            <param name="undo"></param>
            <param name="changeSetItemColl"></param>
            <param name="correspondingRealCSI"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateRepositoryWithPendingChange(VaultClientOperationsLib.ChangeSetItemPerformPending,System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Updates the pseudo-repository that represents pending changes.
            </summary>
            <param name="csiPP"></param>
            <param name="updateWorkingFolder"></param>
            <param name="undo"></param>
            <param name="isRefresh"></param>
            <param name="csisToRemove"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateChangesetForNewItem(VaultClientOperationsLib.ChangeSetItemColl,VaultClientOperationsLib.ChangeSetItemPerformPending,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl,System.Collections.ArrayList@)">
            <summary>
            Updates existing pending changes based on the namespace changes made by newCSI, which is about to be pended or undone.
            Returns true if newCSI should be pended, false if newCSI is ultimately a no-op.  Should never return false for an undo.
            </summary>
            <param name="changesetToUpdate">
                The list of changes that will potentially be modified due to the new change newCSI.
                This would be either the "normal" pending changeset or the pending server namespace changes.
            </param>
            <param name="newCSI"></param>
            <param name="undo"></param>
            <param name="csisToRemove"></param>
            <param name="additionalClientOnlyDeltas"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateChangesetForNewNamespaceChangeItem(VaultClientOperationsLib.ChangeSetItemColl,VaultClientOperationsLib.ChangeSetItemNamespaceChange,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Updates existing pending changes based on the namespace changes made by newCSI, which is about to be pended or undone.
            Returns true if newCSI should be pended, false if newCSI is ultimately a no-op.  Should never return false for an undo.
            </summary>
            <param name="changesetToUpdate"></param>
            <param name="newCSI"></param>
            <param name="undo"></param>
            <param name="csisToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateRepositoryWithPendingChanges(VaultClientOperationsLib.ChangeSetItemColl,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the pseudo-repository that represents pending changes.
            </summary>
            <param name="items"></param>
            <param name="updateWorkingFolder"></param>
            <param name="undo"></param>
            <param name="isRefresh"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.FindCorrespondingChangeSetItem(VaultClientOperationsLib.ChangeSetItemNamespaceChange,VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            When a move and a rename of the same object are pended, neither source path is "right" (where "right" means it exists in the tree)
            when we're applying deltas to get the client-side tree into the right state.  For a given move or rename, this method finds the matching
            move/rename in the collection so we can take it's namespace change into account and find the original item in the tree for delta application.
            </summary>
            <param name="item"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.ChangeSetItems_RemoveRange_PostCommit(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Remove the provided ChangeSetItems from the internal changeset without altering the 
            "Pending Changes Repository" or undoing the changes in the working folder.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.RemoveChangeSetItemRange(VaultClientOperationsLib.ChangeSetItemColl,System.Boolean)">
            <summary>
            Remove ChangeSetItems from the internal change set.
            </summary>
            <param name="items"></param>
            <param name="manualRemoval">If true, update the pending changes repository and perform undo operations in working folder.</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.SetLabelWorkingFolder(System.String,System.String)">
            <summary>
            Used only during Get By Label commands so the working folders don't 
            override other associations.  Never saved to disk.
            </summary>
            <param name="fullPath"></param>
            <param name="diskPath"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdateWorkingFolderPath(System.String,System.String)">
            <summary>
            Used to rename an existing working folder association's fullPath
            to a new string.  Keeps the mapping to diskPath the same.
            </summary>
            <param name="oldFullPath">The exact old repository path.</param>
            <param name="newFullPath">The exact new repository path.</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetWorkingFolder(System.String)">
            <summary>
            Get the working folder directly assigned to the provided repository path (not inherited), if any.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetCorrespondingRepositoryPath(System.String)">
            <summary>
            Gets the repository path that is the best match for the diskPath that is provided.
            </summary>
            <param name="diskPath">The full local path to test</param>
            <returns>The repository path that matches.  Will return null if no working folder is mapped.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetIDForWorkingFolder(System.String)">
            <summary>
            Gets the ID for the disk path.  This function must iterate through
            the working folder assignments (it cannot use the hash), so it should
            be avoided where performance is a requirement.
            </summary>
            <param name="diskPath">The disk path to the working folder candidate.</param>
            <returns>The ID of the working folder assigned to diskPath.  If diskPath has no assigned ID, -1.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetBestWorkingFolder(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Gets the working folder for Folder n.  If none is set, recurses
            through ancestry for a working folder, then adds back the intermediate
            paths to construct a "best guess".  If no nodes in the ancestry have
            a working folder set, this function will return null.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetBestWorkingFolder(System.String)">
            <summary>
            Gets the working folder for repository folder specified by repositoryFolderPath.
            If none is set, recurses through ancestry for a working folder, then adds 
            back the intermediate paths to construct a "best guess".  If no nodes in 
            the ancestry have a working folder set, this function will return null.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.PhysicalPath(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Tries to determine the local physical path for the given VaultClientFile
            by combining its name with its working folder.  If no working folders are
            set in its ancestry, null will be returned.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.PendingLocalDeletions_BeginChanges">
            <summary>
            Manually begin a change set to the pending local deletions.  Calling this
            function is not required before calling the other PendingLocalDeletion
            methods in this class, but will cause all the changes made between it
            and PendingLocalDeletions_EndChanges to be saved only once (when
            PendingLocalDeletions_EndChanges is called).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.PendingLocalDeletions_EndChanges">
            <summary>
            Manually end a change set to the pending local deletions.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdatePendingLocalDeletion(VaultClientOperationsLib.PendingLocalDeletion)">
            <summary>
            Update the local deletions table with the given deletion.  If a deletion with the same 
            repository path already exists, it will be replaced with the supplied deletion.
            </summary>
            <param name="deletion"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.RemovePendingLocalDeletionByRepositoryPath(System.String)">
            <summary>
            Remove any existing deletions for the given repository path.
            </summary>
            <param name="repositoryPath"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.RemovePendingLocalDeletionsByRepositoryPathPrefix(System.String)">
            <summary>
            Remove any existing deletions that have a repository path that begins with the given path prefix.
            </summary>
            <param name="repositoryPathPrefix"></param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.ClearPendingLocalDeletions">
            <summary>
            Remove all pending local deletions.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.GetPendingLocalDeletions(System.String,VaultClientOperationsLib.PendingLocalDeletion_Folder[]@,VaultClientOperationsLib.PendingLocalDeletion_File[]@)">
            <summary>
            Get all of the pending local deletions for the supplied path prefix.
            </summary>
            <param name="repositoryFolderPrefix">The prefix that each deletion to be returned must match.</param>
            <param name="folders">A reference into which the array of folders will be returned.</param>
            <param name="files">A reference into which the array of files will be returned.</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.UpdatePendingLocalDeletionsRepositoryPaths(System.String,System.String)">
            <summary>
            Update any pending local deletions with the given oldPathPrefix to have the newPathPrefix.
            </summary>
            <param name="oldPathPrefix">The old path prefix to replace.</param>
            <param name="newPathPrefix">The new path prefix to use.</param>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.IsCloakedRecursive(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Returns true if the given folder or any of its parents are cloaked, false otherwise.
            </summary>
            <param name="folder">The folder to examine for cloakedness.</param>
            <returns>True if the folder or any of its parents are cloaked, false otherwise.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.DoLocalRefresh">
            <summary>
            Raise the events that come with refreshing a tree, but don't actually
            contact the server for new data.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.IsFilenameMergeable(System.String)">
            <summary>
            Checks to see if the extension of a file name is
            in the list of mergeable extensions.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.TreeCache.Dispose">
            <summary>
            Call this method when you're done using the tree cache object.  It
            will free up system mutex objects that would otherwise hang around
            until the garbage collector got to them (or didn't).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.LocalStoragePath">
            <summary>
            Gets the storage path at which this TreeCache will store and load its data files.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.Repository">
            <summary>
            The repository that reflects relevant pending changes
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.ServerSynchedRepository">
            <summary>
            The repository that matches the last synch with the server
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.ChangeSetItems">
            <summary>
            Do not modifiy the collection you get back.  All changes 
            will be lost.  Use the InternalChangeSet_*() functions in the client
            instance for all modifications.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.KnownChangesLock">
            <summary>
            Gets the lock object used to synchronize access to the known changes
            Hashtable.  Lock this when iterating over the KnownChanges.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.TreeCache.KnownChanges">
            <summary>
            Gets the known changes Hashtable.  Lock KnownChangesLock when iterating
            over this table.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.IntegratedProject">
            <summary>
            Interface for an integrated Component Project...
            TBD - is this specific for work item projects?
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetWorkflowsByType(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.BeginGetWorkflowsByType(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.EndGetWorkflowsByType(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetWorkflowsByTypeAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetWorkflowsByTypeAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.BeginGetByWorkflowId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.EndGetByWorkflowId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetStepsByWorkflowId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.BeginGetStepsByWorkflowId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.EndGetStepsByWorkflowId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetStepsByWorkflowIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetStepsByWorkflowIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowStepId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.BeginGetByWorkflowStepId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.EndGetByWorkflowStepId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowStepIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowStepIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetWorkflowsByTypeCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetStepsByWorkflowIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowHandler.GetByWorkflowStepIdCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.ItemTypes.Incident">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.WorkflowId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.WorkflowName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.WorkflowDescription">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.IsActive">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.WorkflowSteps">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow.StepRelations">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.IsDirty">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.WorkflowStepId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.WorkflowId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.StepOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.StepName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.EditFieldTemplateId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.RequireEdit">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.ChangesFieldTemplateXml">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.RequireCompletedTasks">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.NewEmailWorkflowStepId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.ArchiveItem">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.UnarchiveItem">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.SuppressNotifications">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.ProcessPath">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.ProcessArguments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.UpdateTimeEstimate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.PromptWorkLogEntry">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.RequireWorkLogEntry">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.DefaultColor">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStep.NotificationList">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Color">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelationSecurity">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelationSecurity.SecurityId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelationSecurity.WorkflowStepRelationId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelationSecurity.SecurityRoleId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelationSecurity.IsDirty">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.RelationId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.WorkflowId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.WorkflowStepFromId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.WorkflowStepToId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.IsDirty">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.WorkflowStepRelation.AllowedSecurityRoles">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetWorkflowsByTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetWorkflowsByTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetWorkflowsByTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetStepsByWorkflowIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetStepsByWorkflowIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetStepsByWorkflowIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowStepIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowStepIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.GetByWorkflowStepIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeDefectWorkflows.AddWorkflow(VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.WorkflowService.Workflow)">
            <summary>
            Add a workflow to the collection of workflows
            </summary>
            <param name="wf"></param>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefect(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginAddDefect(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndAddDefect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectWithNotification(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginAddDefectWithNotification(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Boolean,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndAddDefectWithNotification(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectWithNotificationAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectWithNotificationAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefect(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginUpdateDefect(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndUpdateDefect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectWithLock(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginUpdateDefectWithLock(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndUpdateDefectWithLock(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectWithLockAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectWithLockAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefect(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginDeleteDefect(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndDeleteDefect(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectWithLock(System.Guid,System.Int32,System.Byte[],System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginDeleteDefectWithLock(System.Guid,System.Int32,System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndDeleteDefectWithLock(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectWithLockAsync(System.Guid,System.Int32,System.Byte[],System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectWithLockAsync(System.Guid,System.Int32,System.Byte[],System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefects(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetAllDefects(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetAllDefects(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsWithNames(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetAllDefectsWithNames(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetAllDefectsWithNames(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsWithNamesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsWithNamesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByProject(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByProject(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByProjectAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByProjectAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByRelease(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByRelease(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByRelease(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAndProject(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByReleaseAndProject(System.Guid,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByReleaseAndProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAndProjectAsync(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAndProjectAsync(System.Guid,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomer(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByCustomer(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByCustomer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAndProject(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByCustomerAndProject(System.Guid,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByCustomerAndProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAndProjectAsync(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAndProjectAsync(System.Guid,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContact(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByCustomerContact(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByCustomerContact(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAndProject(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByCustomerContactAndProject(System.Guid,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByCustomerContactAndProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAndProjectAsync(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAndProjectAsync(System.Guid,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUser(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByUser(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAndProject(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetDefectsByUserAndProject(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetDefectsByUserAndProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAndProjectAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAndProjectAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetByDefectId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetByDefectId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetByDefectId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetByDefectIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetByDefectIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldValuesList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetCustomFieldValuesList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetCustomFieldValuesList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldValuesListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldValuesListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldsList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginGetCustomFieldsList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndGetCustomFieldsList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldsListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldsListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationUser(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginAddChangeNotificationUser(System.Guid,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndAddChangeNotificationUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationUserAsync(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationUserAsync(System.Guid,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationCustomerContact(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginAddChangeNotificationCustomerContact(System.Guid,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndAddChangeNotificationCustomerContact(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationCustomerContactAsync(System.Guid,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationCustomerContactAsync(System.Guid,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationEmailAddress(System.Guid,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginAddChangeNotificationEmailAddress(System.Guid,System.Int32,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndAddChangeNotificationEmailAddress(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationEmailAddressAsync(System.Guid,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationEmailAddressAsync(System.Guid,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.CastVote(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.BeginCastVote(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.EndCastVote(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.CastVoteAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.CastVoteAsync(System.Guid,System.Int32,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddDefectWithNotificationCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.UpdateDefectWithLockCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.DeleteDefectWithLockCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetAllDefectsWithNamesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByReleaseAndProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerAndProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByCustomerContactAndProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetDefectsByUserAndProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetByDefectIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldValuesListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.GetCustomFieldsListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationUserCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationCustomerContactCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.AddChangeNotificationEmailAddressCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DefectHandler.CastVoteCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasAttachments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasNotifications">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasRelatedItems">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasSCMFiles">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasEmails">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasWorkLog">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.HasAlerts">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.Name">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.CustomFieldValues">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.LastUpdatedById">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.Archived">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.WorkflowStepId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ReportedById">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.AssignedToId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.CreatedById">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ReportedByCustomerContactId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.EstimatedDuration">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.DurationUnitTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.RemainingDuration">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.RemainingUnitTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ActualDuration">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ActualUnitTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.PubliclyViewable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.DueDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.PriorityTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.StatusTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.PercentComplete">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.CreatedDateTime">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.LastUpdatedDateTime">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.Description">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.Notes">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.LastUpdated">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.VoteCount">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.VoteAverage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.UserVote">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.VoteItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.OnTimeItem.ItemId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.DefectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.BuildNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.DateFound">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.DateFixed">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.BuildNumberOfFix">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.SeverityTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.ReplicationProcedures">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.Resolution">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.Defect.CreatorId">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldValue">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldValue.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldValue.Value">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.CustomFieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.TableFieldName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.FieldType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.RecordType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.FieldLabel">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.PickListId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.StringSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.Format">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.DisplayOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.IsMultiSelect">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.IsEditable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.IsCustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.IsGroupable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.IsSearchable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.SortExpression">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomField.SelectExpression">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.Double">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.String">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.DateTime">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.PickList">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.Text">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.Boolean">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.Hyperlink">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomFieldTypes.Comments">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Incident">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.WorkLog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Project">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.Customer">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CustomRecordTypes.CustomerContact">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.VoteItemType">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.VoteItemType.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.VoteItemType.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.VoteItemType.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.VoteItemType.Incident">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags.CreatedBy">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags.ReportedBy">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags.AssignedTo">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UsersTreeFilterFlags.LastUpdatedBy">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType.User">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UserType.CustomerContact">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectWithNotificationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectWithNotificationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddDefectWithNotificationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UpdateDefectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UpdateDefectWithLockCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UpdateDefectWithLockCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.UpdateDefectWithLockCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DeleteDefectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DeleteDefectWithLockCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DeleteDefectWithLockCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.DeleteDefectWithLockCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsWithNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsWithNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetAllDefectsWithNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseAndProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseAndProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByReleaseAndProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerAndProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerAndProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerAndProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactAndProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactAndProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByCustomerContactAndProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserAndProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserAndProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetDefectsByUserAndProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetByDefectIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetByDefectIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetByDefectIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldValuesListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldValuesListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldValuesListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldsListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldsListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.GetCustomFieldsListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddChangeNotificationUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddChangeNotificationCustomerContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.AddChangeNotificationEmailAddressCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.DefectService.CastVoteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.VaultIntegrationComponents">
            <summary>
            IntegrationComponents is the master "factory" maker for 
            our different types of integrations
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.WorkItemModifications">
            <summary>
            class used to hold changes made to ALLL integration work items from a commit
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.WorkItemModifications.DetectWorkItemModifications">
            <summary>
            Method should determine if any work item modifications are available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.FirstName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.LastName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.Email">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.WindowsId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.LoginId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.Password">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseWindowsAuth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.BuiltInAccount">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.IsActive">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseWindowsClient">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseWebClient">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseVSClient">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseMixedMode">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.EnterpriseConnectionType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.LastLoginDateTime">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseIPhoneClient">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.UseEclipseClient">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.Settings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User.Permissions">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeUser.GetValidLoginName">
            <summary>
            Method will return either the OnTime Login or if empty and configured for it, the Windows Login
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetAllProjects(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginGetAllProjects(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndGetAllProjects(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetAllProjectsAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetAllProjectsAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetByProjectId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginGetByProjectId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndGetByProjectId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetByProjectIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetByProjectIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.AddProject(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginAddProject(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndAddProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.AddProjectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.AddProjectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.UpdateProject(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginUpdateProject(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndUpdateProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.UpdateProjectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.UpdateProjectAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.DeleteProject(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginDeleteProject(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndDeleteProject(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.DeleteProjectAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.DeleteProjectAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomerCustomFieldValuesList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginGetCustomerCustomFieldValuesList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndGetCustomerCustomFieldValuesList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomerCustomFieldValuesListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomerCustomFieldValuesListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomFieldsList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.BeginGetCustomFieldsList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.EndGetCustomFieldsList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomFieldsListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomFieldsListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetAllProjectsCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetByProjectIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.AddProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.UpdateProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.DeleteProjectCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomerCustomFieldValuesListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.ProjectHandler.GetCustomFieldsListCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.ParentId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.Name">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.Description">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.StartDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.DueDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.IsActive">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.Path">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.HasChildren">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.HasAlerts">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.HasAttachments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.HasNotificationLists">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.Project.CustomFieldValues">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldValue">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldValue.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldValue.Value">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.CustomFieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.TableFieldName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.FieldType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.RecordType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.FieldLabel">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.PickListId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.StringSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.Format">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.DisplayOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.IsMultiSelect">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.IsEditable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.IsCustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.IsGroupable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.IsSearchable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.SortExpression">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomField.SelectExpression">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.Double">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.String">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.DateTime">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.PickList">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.Text">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.Boolean">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.Hyperlink">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomFieldTypes.Comments">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Incident">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.WorkLog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Project">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.Customer">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.CustomRecordTypes.CustomerContact">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetAllProjectsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetAllProjectsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetAllProjectsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetByProjectIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetByProjectIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetByProjectIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.AddProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.AddProjectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.AddProjectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.UpdateProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.DeleteProjectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomerCustomFieldValuesListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomerCustomFieldValuesListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomerCustomFieldValuesListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomFieldsListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomFieldsListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ProjectService.GetCustomFieldsListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderState_1">
            <summary>
            A single container for working folder state information that can be serialized
            to a file in the hidden folder.  This class does not know its folder name so
            its containing folder can be moved safely around the filesystem.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.HasExtendedInformation(System.Int64,System.Int64)">
            <summary>
            Extended information includes a file's size, crc, time managed.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.Write(System.IO.Stream)">
            <summary>
            Writes a working folder state object to a stream faster than Microsoft binary serialization.
            </summary>
            <param name="outputStream">The output stream to write the object to.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.Write_1(System.IO.BinaryWriter)">
            <summary>
            Writes format version 1.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.Read(System.IO.Stream,System.Boolean@)">
            <summary>
            Reads a working folder state object from a stream faster than Microsoft binary serialization.
            </summary>
            <param name="inputStream">The stream to read the repository from.</param>
            <param name="readOldFormat">Function will set this to true if the format we read was not the most current format, false if it was the most current format.</param>
            <returns>A WorkingFolderState_1 instance filled with values from the file.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.Read(VaultClientOperationsLib.WorkingFolderState)">
            <summary>
            Reads a working folder state object from an old format WorkingFolderState
            class instance.  Returns a new class initialized with the values form the old.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderState_1.Read_1(System.IO.BinaryReader)">
            <summary>
            Reads format version 1.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderState">
            <summary>
            This class is deprecated.  It exists only so we can deserialize old files in the
            Microsoft Binary Serialization format.  Don't modify it or use it.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UserOptionsCollection">
            <summary>
            Class containing user option name and value arrays
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.#ctor(System.String[],System.String[])">
            <summary>
            Create a new instance based on existing name and value arrays
            </summary>
            <param name="names">Name array to use</param>
            <param name="values">Value array to use</param>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetOptionArrays(System.String[]@,System.String[]@)">
            <summary>
            Retieves the name and value arrays from this instance
            </summary>
            <param name="names"></param>
            <param name="values"></param>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.Add(System.String,System.String)">
            <summary>
            Adds an option to the list
            </summary>
            <param name="optionName">Option name to add</param>
            <param name="optionValue">Option value to add</param>
            <returns>The new length of the option list</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.Remove(System.String)">
            <summary>
            Removes an option from the list
            </summary>
            <param name="optionName"></param>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetNameAt(System.Int32)">
            <summary>
            Gets the option name at the given array location
            </summary>
            <param name="index">The array index to retrieve</param>
            <returns>The name at the specified index</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetValueAt(System.Int32)">
            <summary>
            Gets the option value at the given array location
            </summary>
            <param name="index">The array index to retrieve</param>
            <returns>The value at the specified index</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetValueAtAsInt(System.Int32)">
            <summary>
            Gets the option value at the given array location as an int
            </summary>
            <param name="index">The array index to retrieve</param>
            <returns>The value at the specified index converted to an int</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetValueAtAsBool(System.Int32)">
            <summary>
            Gets the option value at the given array location as a bool
            </summary>
            <param name="index">The array index to retrieve</param>
            <returns>The value at the specified index converted to a bool</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the option at the specified index
            </summary>
            <param name="index">The index of the option to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetOption(System.String)">
            <summary>
            Gets the value of the specified option
            </summary>
            <param name="optionName">The name of the option to retrieve</param>
            <returns>The option value, or empty string if the option is not found</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetOptionAsInt(System.String)">
            <summary>
            Gets the value of the specified option as an int
            </summary>
            <param name="optionName">The name of the option to retrieve</param>
            <returns>The option value as an int, or -1 if the option is not found</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.HasOption(System.String)">
            <summary>
            Checks to see if the specified option exists in the list
            </summary>
            <param name="optionName">The option name to search for</param>
            <returns>True if the option is found</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.GetOptionAsBool(System.String)">
            <summary>
            Gets the value of the specified option as a bool
            </summary>
            <param name="optionName">The name of the option to retrieve</param>
            <returns>The option value as a bool, or false if the option is not found</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptionsCollection.SetOption(System.String,System.String)">
            <summary>
            Sets the value of an existing option, or adds the option if it is not found
            </summary>
            <param name="optionName">The name of the option to set</param>
            <param name="optionValue">The value to set the option to</param>
        </member>
        <member name="P:VaultClientOperationsLib.UserOptionsCollection.Count">
            <summary>
            Returns the number of options in the list
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.PromptForUndoCheckOutCallback">
            <summary>
            Delegate for prompting to undo a checked out file, returns false to cancel, true to keep going.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UndoCheckOutPrompt">
            <summary>
            UndoCheckOutPrompt contains state info and a function callback for 
            prompting during undo check out.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UndoCheckOutPrompt.DoPrompt(VaultClientOperationsLib.WorkingFolder,VaultClientOperationsLib.VaultClientFile,System.String,System.String,VaultClientOperationsLib.LocalCopyType@)">
            <summary>
            Call the delegate to prompt for an undo check out.
            </summary>
            <param name="wf">WorkingFoolder that the file resides in</param>
            <param name="file">VaultClientFile that is being retrieved</param>
            <param name="origFile">string path to the file being overwritten</param>
            <param name="newFile">string path to the file doing the overwriting</param>
            <param name="action">The action returned by the prompt.</param>
            <returns>true if we should keep going, false if cancel was pressed.</returns>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessage">
            <summary>
            ProgressMessage is the base class for messages to be written to managed
            messages text boxes.  Each message has a "Message" property, which will
            return the full message to be seen by the user.  Each message also has
            a message level, which is used by the text box to draw specific messages
            with special formatting.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage._indentSpaces">
            <summary>
            string containinga number of spaces to ident
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage._when">
            <summary>
            Remembers when the item was created
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage._formatString">
            <summary>
            The format (or normal) string that is the text of the message.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage._args">
            <summary>
            These arguments will be inserted in the format string when the Message
            property is executed.  The arguments in this array must be in the order of
            appearance in the format string.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage._level">
            <summary>
            The level is usually set by the derived constructor, and is retrieved through
            the Level property.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessage.#ctor(VaultClientOperationsLib.ProgressMessage.MessageLevel)">
            <summary>
            ctor
            </summary>
            <param name="level">The message level to use for this message</param>
        </member>
        <member name="P:VaultClientOperationsLib.ProgressMessage.Message">
            <summary>
            Gets the message to display
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ProgressMessage.Level">
            <summary>
            Gets the message level associated with this progress message
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ProgressMessage.When">
            <summary>
            Gets the timestamp
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessage.MessageLevel">
            <summary>
            enum that defines the message level
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage.MessageLevel.Normal">
            <summary>
            normal messages
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage.MessageLevel.Error">
            <summary>
            error messages
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ProgressMessage.MessageLevel.Warning">
            <summary>
            warning messages
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageAborting">
            <summary>
            subclass for "Aborted" progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageAborting.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageAborted">
            <summary>
            subclass for "Aborted" progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageAborted.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageRefreshBegin">
            <summary>
            Subclass for Refresh Begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageRefreshBegin.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageSimpleString">
            <summary>
            Subclass for simple messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageSimpleString.#ctor(System.String,VaultClientOperationsLib.ProgressMessage.MessageLevel)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageRefreshEnd">
            <summary>
            Subclass for Refresh End progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageRefreshEnd.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageCheckOutFileBegin">
            <summary>
            Subclass for check out file begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageCheckOutFileBegin.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageCheckOutFileEnd">
            <summary>
            Subclass for check out file end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageCheckOutFileEnd.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageCheckOutFolderBegin">
            <summary>
            Subclass for check out folder begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageCheckOutFolderBegin.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageCheckOutFolderEnd">
            <summary>
            Subclass for check out folder end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageCheckOutFolderEnd.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageCheckOutFailed">
            <summary>
            Subclass for check out failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageCheckOutFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
            <param name="reason"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageUndoCheckOut">
            <summary>
            Subclass for undo check out progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageUndoCheckOut.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageUndoCheckOutFailed">
            <summary>
            Subclass for undo check out failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageUndoCheckOutFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
            <param name="reason"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageLabelStart">
            <summary>
            Subclass for label progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageLabelStart.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="labelName"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageLabelSuccess">
            <summary>
            Subclass for label progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageLabelSuccess.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="labelName"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageLabelFailed">
            <summary>
            Subclass for label failure progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageLabelFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageAutomaticMergeFailed">
            <summary>
            Subclass for automatic merge failure progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageAutomaticMergeFailed.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="diskFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionBeginFileOrFolder">
            <summary>
            Subclass for Get latest begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionBeginFileOrFolder.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionEndFileOrFolder">
            <summary>
            Subclass for get latest end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionEndFileOrFolder.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetHistoricalVersionBeginFileOrFolder">
            <summary>
            Subclass for Get latest begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetHistoricalVersionBeginFileOrFolder.#ctor(System.Int64,System.String)">
            <summary>
            ctor
            </summary>
            <param name="version"></param>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetHistoricalVersionEndFileOrFolder">
            <summary>
            Subclass for get latest end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetHistoricalVersionEndFileOrFolder.#ctor(System.Int64,System.String)">
            <summary>
            ctor
            </summary>
            <param name="version"></param>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLabelVersionBeginFileOrFolder">
            <summary>
            Subclass for Get latest begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLabelVersionBeginFileOrFolder.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="label"></param>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLabelVersionEndFileOrFolder">
            <summary>
            Subclass for get latest end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLabelVersionEndFileOrFolder.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="label"></param>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionBeginMultipleFiles">
            <summary>
            Subclass for get latest begin for multiple files progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionBeginMultipleFiles.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionEndMultipleFiles">
            <summary>
            Subclass for get latest end for multiple files progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionEndMultipleFiles.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetOtherVersionBeginMultipleFiles">
            <summary>
            Subclass for get latest begin for multiple files progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetOtherVersionBeginMultipleFiles.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetOtherVersionEndMultipleFiles">
            <summary>
            Subclass for get latest end for multiple files progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetOtherVersionEndMultipleFiles.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionFile">
            <summary>
            Subclass for get latest for a file progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionFile.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionOverwroteUnknownFile">
            <summary>
            Subclass for overwriting unknown files progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionOverwroteUnknownFile.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="diskPath"></param>
            <param name="backupDiskPath"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionFileNoDownload">
            <summary>
            Subclass for get latest no download progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionFileNoDownload.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionFileFailed">
            <summary>
            Subclass for get latest failure progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionFileFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
            <param name="reason"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionException">
            <summary>
            Subclass for get latest failure progress messages
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionStreamErrorRetrying">
            <summary>
            Subclass for get latest failure progress messages
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionCorruptBaseLine">
            <summary>
            Subclass for get latest failure progress messages
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionFailedTooManyTimes">
            <summary>
            Subclass for get latest failure progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionFailedTooManyTimes.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionLocalUpdateFailed">
            <summary>
            Subclass for get latest failures on local update (with a reason) progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionLocalUpdateFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
            <param name="reason"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageGetLatestVersionLocalUpdateFailedNoReason">
            <summary>
            Subclass for get latest failure on local update (without a reason) progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageGetLatestVersionLocalUpdateFailedNoReason.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageBeforeTransactionBegin">
            <summary>
            Subclass for before transaction begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageBeforeTransactionBegin.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionBegin">
            <summary>
            Subclass for transaction begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionBegin.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionCallingEndTx">
            <summary>
            Subclass for calling end tx progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionCallingEndTx.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionEnd">
            <summary>
            Subclass for transaction end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionEnd.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionBeginTxFailed">
            <summary>
            Subclass for begintx failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionBeginTxFailed.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionEndTxFailed">
            <summary>
            Subclass for endtx failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionEndTxFailed.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionException.#ctor(System.Exception)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionAborted">
            <summary>
            Subclass for transaction aborted progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionAborted.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionFailed">
            <summary>
            Subclass for transaction failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionFailed.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageRetryingTransaction">
            <summary>
            Subclass for transaction failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageRetryingTransaction.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionItemTooBig">
            <summary>
            Subclass for item too big progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionItemTooBig.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFile"></param>
            <param name="fileSizeBytes"></param>
            <param name="serverUploadLimitBytes"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionItemFailed">
            <summary>
            Subclass for item failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionItemFailed.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
            <param name="reason"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedRetrying">
            <summary>
            Subclass for upload failed and is retrying progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedRetrying.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedPermanently">
            <summary>
            Subclass for upload failed permanently progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedPermanently.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedAborting">
            <summary>
            Subclass for upload failed aborting progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionUploadFailedAborting.#ctor(System.String,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
            <param name="e"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionAdd">
            <summary>
            Subclass for transaction add progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionAdd.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionCheckIn">
            <summary>
            Subclass for transaction check in progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionCheckIn.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionDelete">
            <summary>
            Subclass for transaction delete progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionDelete.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionCreateFolder">
            <summary>
            Subclass for transaction create folder progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionCreateFolder.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionBranch">
            <summary>
            Subclass for transaction branch progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionBranch.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionSnapshot">
            <summary>
            Subclass for transaction snapshot progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionSnapshot.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionPin">
            <summary>
            Subclass for transaction Pin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionPin.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionUnPin">
            <summary>
            Subclass for transaction unpin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionUnPin.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionShare">
            <summary>
            Subclass for transaction share progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionShare.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionRename">
            <summary>
            Subclass for transaction rename progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionRename.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionMove">
            <summary>
            Subclass for transaction move progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionMove.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionUndelete">
            <summary>
            Subclass for transaction undelete progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionUndelete.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionChangeFileProperties">
            <summary>
            Subclass for transaction change file properties progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionChangeFileProperties.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionRollback">
            <summary>
            Subclass for transaction rollback progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionRollback.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageTransactionChangeExtProperties">
            <summary>
            Subclass for transaction change extended properties progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageTransactionChangeExtProperties.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="repositoryFileOrFolder"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageDisconnectBegin">
            <summary>
            Subclass for disconnect begin progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageDisconnectBegin.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageDisconnectEnd">
            <summary>
            Subclass for disconnect end progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageDisconnectEnd.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ProgressMessageBugUpdateFailed">
            <summary>
            Subclass for bug update failed progress messages
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ProgressMessageBugUpdateFailed.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="bugIDs"></param>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetStatusTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetStatusTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetStatusTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetStatusTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetStatusTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetSeverityTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetSeverityTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetSeverityTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetSeverityTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetSeverityTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetPriorityTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetPriorityTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetPriorityTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetPriorityTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetPriorityTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetCategoryTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetCategoryTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesByOwner(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetCategoryTypesByOwner(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetCategoryTypesByOwner(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesByOwnerAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesByOwnerAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetTimeUnitTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetTimeUnitTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetTimeUnitTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetTimeUnitTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetTimeUnitTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetItemRelationTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetItemRelationTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetItemRelationTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetItemRelationTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetItemRelationTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetWorkLogTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetWorkLogTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetWorkLogTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetWorkLogTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetWorkLogTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetReleaseTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetReleaseTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypes(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetReleaseStatusTypes(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetReleaseStatusTypes(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesByReleaseType(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.BeginGetReleaseStatusTypesByReleaseType(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.EndGetReleaseStatusTypesByReleaseType(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesByReleaseTypeAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesByReleaseTypeAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetStatusTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetSeverityTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetPriorityTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetCategoryTypesByOwnerCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetTimeUnitTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetItemRelationTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetWorkLogTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.TypeHandler.GetReleaseStatusTypesByReleaseTypeCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetStatusTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetStatusTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetStatusTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetSeverityTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetSeverityTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetSeverityTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetPriorityTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetPriorityTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetPriorityTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesByOwnerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesByOwnerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetCategoryTypesByOwnerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetTimeUnitTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetTimeUnitTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetTimeUnitTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetItemRelationTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetItemRelationTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetItemRelationTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetWorkLogTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetWorkLogTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetWorkLogTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesByReleaseTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesByReleaseTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.TypeService.GetReleaseStatusTypesByReleaseTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.ConnectionStateType">
            <summary>
            Enum listing the possible values for the connection state of the client
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ConnectionStateType.Unconnected">
            <summary>
            Not connected to a server
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ConnectionStateType.Connecting">
            <summary>
            In the process of connecting to a server
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ConnectionStateType.Connected">
            <summary>
            Connected to a server
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ConnectionStateType.Disconnecting">
            <summary>
            In the process of disconnecting from a server
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ConnectionStateChangedEventHandler">
            <summary>
            Delegate for handling changes in connection state
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.StatusChangedEventHandler">
            <summary>
            Delegate for handling changes in status
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ActiveRepositoryChangedEventHandler">
            <summary>
            Delegate for handling when the active repository changes
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.BackupDirectory">
            <summary>
            This class represents the information contained in a backup directory for a specific VaultClientFile.  
            You can use this class to get the backup files for the VaultClientFile.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.#ctor(System.String,VaultClientOperationsLib.VaultClientFile)">
            <summary>
            BackupDirectory constructor.
            </summary>
            <param name="diskPath">The physical path to the backup directory.</param>
            <param name="vfile">The VaultClientFile for which backup files are desired.</param>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.Equals(System.Object)">
            <summary>
            Override of Object.Equals to enable the use of ArrayList.Contains.
            </summary>
            <param name="obj"></param>
            <returns>True if the obj is a BackupDirectory and the File properties match, otherwise false.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.GetBackupFiles(System.Collections.ArrayList@)">
            <summary>
            Gets the contents of the backup folder and constructs an ArrayList of 
            the backup files for the desired VaultClientFile (_vFile).
            </summary>
            <param name="fileArray">The ArrayList field to store the results in (_backupFiles or _newBackupFiles).</param>
            <returns>Returns an ArrayList of BackupFile objects.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.GetOldestFiles(System.Int32)">
            <summary>
            Sorts the ArrayList of files by age and returns a specified number of the oldest files.
            </summary>
            <param name="numFiles">The number of files to return.</param>
            <returns>An Array of the oldest files (length specified by numFiles parameter).</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.GetBackupFiles">
            <summary>
            Gets the contents of the backup folder and constructs an ArrayList of 
            the backup files for the desired VaultClientFile (_vFile).
            </summary>
            <returns>An Array of BackupFile objects.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupDirectory.Cleanup(System.Int32)">
            <summary>
            Deletes unwanted backup files.  The oldest backups will be deleted until
            only the desired number remain.
            </summary>
            <param name="limit">The maximum number of backup files to leave.</param>
        </member>
        <member name="T:VaultClientOperationsLib.PropertiesFormatStrings">
            <summary>
            Summary description for PropertiesFormatStrings.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeCustomerContact">
            <summary>
            Class to represent an OnTime Customer Contact
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.CustomerContactId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.CustomerId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.FirstName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.LastName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.Email">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.Phone">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.Password">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.Status">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.CanLogin">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.CustomFieldValues">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectViewOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectViewPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectAdd">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectEditOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectEditPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectViewAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectViewAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectAddAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowDefectAddAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.IncludeCompanyDefects">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureViewOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureViewPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureAdd">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureEditOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureEditPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureViewAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureViewAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureAddAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowFeatureAddAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.IncludeCompanyFeatures">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskViewOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskViewPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskAdd">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskEditOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskEditPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskViewAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskViewAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskAddAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowTaskAddAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.IncludeCompanyTasks">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentViewOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentViewPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentAdd">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentEditOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentEditPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentViewAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentViewAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentAddAttachmentOwn">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowIncidentAddAttachmentPublic">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.IncludeCompanyIncidents">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowViewPublicWikiPages">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowEditPublicWikiPages">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowAddPublicWikiPages">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowAddWikiAttachments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowViewWikiComments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.AllowAddWikiComments">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact.Settings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeCustomer">
            <summary>
            Class to represent an Axosoft OnTime Customer
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.CustomerId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.CompanyName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.CompanyURL">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.DefectViewProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.DefectViewFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.DefectAddEditProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.FeatureViewProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.FeatureViewFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.FeatureAddEditProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.TaskViewProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.TaskViewFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.TaskAddEditProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.IncidentViewProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.IncidentViewFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.IncidentAddEditProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.WikiPageViewProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.WikiPageAddEditProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer.CustomFieldValues">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.UploadThread">
            <summary>
            UploadThread is a worker thread designed to upload files.  Commands are executed through the BeginCommand
            method, and results are retrieved (if desired) through GetCommandResult
            (or GetCommandResult_NoWait).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UploadThread._commandQueue">
            <summary>
            Contains work items to be processed by the update thread.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UploadThread._commandQueueMaxCount">
            <summary>
            The maximum number of items that can sit in the command queue.  Adding
            new items when the queue is at max capacity will block until an item is
            removed from the queue (processed by the worker thread).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UploadThread._resultHash">
            <summary>
            Contains result items for commands.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UploadThread.Start">
            <summary>
            Our thread's entry point.  Use this function when launching this class in a new thread.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UploadThread.ProcessCommand(VaultClientOperationsLib.UploadThreadCommand,VaultClientOperationsLib.UploadThreadCommandResult@)">
            <summary>
            Takes a command (fed from the _commandQueue) and performs the command's
            action.
            </summary>
            <param name="command">The command to process.</param>
            <param name="outputResult">A reference to an UploadThreadCommandResult variable.  The result will be created and attached to this variable.</param>
            <returns>true if thread execution should continue, false if the thread should be stopped.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UploadThread.CreateThreadInstance(System.Threading.Thread@,VaultClientOperationsLib.UploadThread@)">
            <summary>
            This is the function you want to use to create a UploadThread (a new thread).
            </summary>
            <param name="newThread">A Thread variable to receive the created Thread.</param>
            <param name="threadClass">An UploadThread variable to receive the created UploadThread class.</param>
        </member>
        <member name="T:VaultClientOperationsLib.LocalSettings">
            <summary>
            Provides get/set methods for settings we store in the registry for the current user.
            If we can figure out a good way to do this with locally-stored XML files, we should
            implement it that way.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.LocalSettings._crypt">
            <summary>
            The encryption engine we use to encrypt password strings.  A key and initial
            vector were generated once and stuck in here as strings.  As long as these 
            strings remain the same, repeated invokations of Encrypt() and Decrypt() will
            be compatable.
            
            Because these keys are compiled into this DLL, any instances of this DLL
            (meaning a Vault client installation on any machine) will be able to decrypt
            a string that was encrypted by any other installation.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.PasswordEncrypt(System.String)">
            <summary>
            Encrypts a password string with a two-way algorithm, so it is obfuscated when
            stored in the registry.
            </summary>
            <param name="s">The plaintext string.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.PasswordDecrypt(System.String)">
            <summary>
            Decrypts a password string with the two-way algorithm used by PasswordEncrypt.
            </summary>
            <param name="s">The string to decrypt.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.KeyExists(System.String)">
            <summary>
            Returns whether or not the input key exists in local settings store
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.GetString(System.String)">
            <summary>
            Get a setting as a string.  If the key is not found in the registry, it is
            created with a default value (from the RegistryKeys resource) and that value
            is returned.
            </summary>
            <param name="key">The setting name.</param>
            <returns>The string representing the value of the setting.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.GetInt(System.String)">
            <summary>
            Like GetString, but returns converted to Int.  Creates if not found.
            </summary>
            <param name="key">The setting name.</param>
            <returns>The integer (Int32) representing the value of the setting.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.SetInt(System.String,System.Int32)">
            <summary>
            Set a setting as an integer.
            </summary>
            <param name="key">The setting name.</param>
            <param name="val">The int representing the value of the setting.</param>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.SetString(System.String,System.String)">
            <summary>
            Set a setting as a string.
            </summary>
            <param name="key">The setting name.</param>
            <param name="val">The string representing the value of the setting.</param>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.GetPasswordString(System.String)">
            <summary>
            Get a password setting as a string.  If the key is not found in the registry, it is
            created with a default value (from the RegistryKeys resource) and that value
            is returned.
            </summary>
            <param name="key">The setting name.</param>
            <returns>The decrypted string representing the value of the setting.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.SetPasswordString(System.String,System.String)">
            <summary>
            Set a setting as a password string.
            </summary>
            <param name="key">The setting name.</param>
            <param name="val">The decrypted string representing the value of the setting.</param>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.GetBool(System.String)">
            <summary>
            Retrieves a local setting as a bool.  If the key is not found in the registry,
            it is created with a default value (from the RegistryKeys resource) and that
            value is returned.
            </summary>
            <param name="key">The setting to retrieve.</param>
            <returns>The bool representing the setting value.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.SetBool(System.String,System.Boolean)">
            <summary>
            Sets a local setting from a given key and bool.
            </summary>
            <param name="key">The setting to set.</param>
            <param name="val">The bool representing the setting's value.</param>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.SetDefaultString(System.String)">
            <summary>
            Set a local string setting to its default.
            </summary>
            <param name="key">The setting to set.</param>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.OpenOrCreateSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Given a parent registry key, tries to open the named child, and creates it if the open failed.
            </summary>
            <param name="parent">The parent registry key under which to look for/create the child.</param>
            <param name="child">The name of the child to open/create.</param>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.LocalSettings.VaultClientConfigReader">
            <summary>
            A generic class which can read/write encrypted/plain
            application specific settings from web.config
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.VaultClientConfigReader.GetConfigSetting(System.String)">
            <summary>
            retrieve the section name from the "value" key of appSettings
            </summary>
            <param name="strSection"></param>
            <returns>the string from appSettings-name</returns>
        </member>
        <member name="M:VaultClientOperationsLib.LocalSettings.VaultClientConfigReader.SetConfigSetting(System.String,System.String)">
            <summary>
            </summary>
            <param name="strSection"></param>
            <param name="strValue"></param>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._folder">
            <summary>
            The disk path where we store our files.  If this is null, 
            we just won't save or load from/to disk.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._shortname">
            <summary>
            The file name we'll use in _folder for our data.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._systemMutexTimeout">
            <summary>
            The number of milliseconds to wait on acquiring the systemmutex.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._systemMutex">
            <summary>
            The mutex used to restrict concurrent access for all instances of
            this class system-wide.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._lastSyncTime">
            <summary>
            The last date this instance was synchronized to or from disk.  We track this
            so we can omit loading the file if it wasn't modified.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CacheMember._memberLock">
            <summary>
            The lock object exposed publically so users of cache members can synchronize access
            to them.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember.TakeSystemMutex">
            <summary>
            Grabs ahold of the system-wide systemmutex for this cache member.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember.ReleaseSystemMutex">
            <summary>
            Releases the system-wide systemmutex for this cache member.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember.UpdateObjectFromDisk(System.Object@)">
            <summary>
            Deserializes the object from disk into object o.  
            </summary>
            <param name="o">A reference to the object to be filled.</param>
            <returns>true if the object was retrieved from disk and o was modified, false if o was not modified.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember.Dispose">
            <summary>
            Frees the system mutex associated with this cache member.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.CacheMember.MemberLock">
            <summary>
            Use this object to synchronize access to this object.  This
            lock is used internally when updating internal cache member data.
            You only need to lock this object when directly changing any member data
            (member functions will do their own locking).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember.UpdateFunc">
            <summary>
            Function type used when describing a derived member's update function
            to batched change functions in the base class.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BatchedChangesCacheMember.BeginChanges(VaultClientOperationsLib.CacheMember.UpdateFunc)">
            <summary>
            Batched changes objects require that you call BeginChanges before calling any Change_* methods.
            Don't forget to call EndChanges when you're done.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BatchedChangesCacheMember.EndChanges(System.Object)">
            <summary>
            Call EndChanges after performing all Change_* methods, once for each call to BeginChanges.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_Repository.SaveIfNewer">
            <summary>
            Save the repository cache member data to disk if it contains information
            about a more recent repository revision than what is on disk.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_Repository.SaveIfNothingOnDisk">
            <summary>
            Save the repository cache member data only if there is currently no saved
            data on disk.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_Repository.DeserializeCacheMember(System.Object@,VaultLib.VaultDateTime@)">
            <summary>
            Loads the cachemember from disk.  Doesn't use Microsoft serialization.
            </summary>
            <param name="o"></param>
            <param name="lastSyncTime"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_Repository.SerializeCacheMember(System.Object,VaultLib.VaultDateTime@)">
            <summary>
            Saves the cachemember to disk.  Doesn't use Microsoft serialization.
            </summary>
            <param name="o"></param>
            <param name="lastSyncTime"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.UpdateFromDisk">
            <summary>
            Instructs the ChangeSetItem to refresh its data from disk (if necessary).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.WorkingFolderPathsEqual(System.String,System.String)">
            <summary>
            Given two folder paths, tells whether they are the same
            folder on disk.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.UpdateWorkingFolderPath(System.String,System.String)">
            <summary>
            Used to rename an existing working folder association's fullPath
            to a new string.  Keeps the mapping to diskPath the same.
            </summary>
            <param name="oldFullPath">The exact old repository path.</param>
            <param name="newFullPath">The exact new repository path.</param>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.GetCorrespondingRepositoryPath(System.String)">
            <summary>
            Gets the repository path that is the best match for the diskPath that is provided.
            </summary>
            <param name="diskpath">The full local path to test</param>
            <returns>The repository path that matches.  Will return null if no working folder is mapped.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.GetIDForWorkingFolder(System.String)">
            <summary>
            Gets the ID for the disk path.  This function must iterate through
            the working folder assignments (it cannot use the hash), so it should
            be avoided where performance is a requirement.
            </summary>
            <param name="diskPath">The disk path to the working folder candidate.</param>
            <returns>The ID of the working folder assigned to diskPath.  If diskPath has no assigned ID, -1.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.GetBestWorkingFolder(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Gets the working folder for Folder f.  If none is set, recurses
            through ancestry for a working folder, then adds back the intermediate
            paths to construct a "best guess".  If no nodes in the ancestry have
            a working folder set, this function will return null.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.GetBestWorkingFolder(System.String)">
            <summary>
            Gets the working folder for repository folder specified by fullFolderPath.
            If none is set, recurses through ancestry for a working folder, then adds 
            back the intermediate paths to construct a "best guess".  If no nodes in 
            the ancestry have a working folder set, this function will return null.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.PhysicalPath(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Tries to determine the local physical path for the given VaultClientFile
            by combining its name with its working folder.  If no working folders are
            set in its ancestry, null will be returned.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_WorkingFolderAssignments.Removal">
            <summary>
            Simple structure type used by SetWorkingFolder and RemoveWorkingFolder.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_SelectionString">
            <summary>
            This class does not ever automatically save its data.  You must call
            Save() manually.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_ChangeSetComment.UpdateFromDisk">
            <summary>
            Instructs the ChangeSetItem to refresh its data from disk (if necessary).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_CommitDialogBugInfo">
            <summary>
            Code mostly copied from CacheMember_ChangeSetComment
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_CommitDialogBugInfo.UpdateFromDisk">
            <summary>
            Instructs the ChangeSetItem to refresh its data from disk (if necessary).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_CheckOutList">
            <summary>
            Holds the list (from the server) of checked out files.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_CheckOutList.SaveIfNewer">
            <summary>
            Save the check outs cache member data to disk if it contains a newer
            list than what already exists.  If the file does not already exist, it
            is always written.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_CheckOutList.DeserializeCacheMember(System.Object@,VaultLib.VaultDateTime@)">
            <summary>
            Loads the cachemember from disk.  Doesn't use Microsoft serialization.
            </summary>
            <param name="o"></param>
            <param name="lastSyncTime"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_CheckOutList.SerializeCacheMember(System.Object,VaultLib.VaultDateTime@)">
            <summary>
            Saves the cachemember to disk.  Doesn't use Microsoft serialization.
            </summary>
            <param name="o"></param>
            <param name="lastSyncTime"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_ExpandedNodes">
            <summary>
            This class does not ever automatically save its data.  You must call
            Save() manually.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ClientCache_DeserializationBinder">
            <summary>
            This class is used when a strongly named opslib (&gt; 3.1) is trying to read a non-strongly named oplib (&lt; 3.1)
            The classes are the exact same as before, so it just tells the de-serializer to use the same class that is
            input.  (With the addition of strong names, the de-serializer thinks it is a different
            dll, when in fact it is the same).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_ChangeSetItems.UpdateFromDisk">
            <summary>
            Instructs the ChangeSetItem to refresh its data from disk (if necessary).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.CacheMember_ChangeSetItems.ChangeSetItems">
            <summary>
            Gets the change set items initiated by the user (adds, deletes, branches, shares, etc.). 
            Be sure to lock MemberLock when iterating over or making changes to the returned
            object.  Change_ functions do the proper locking for you.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CacheMember_KnownChanges">
            <summary>
            This class does not automatically save its changes to disk.  You must call
            Save() manually.
            
            The known changes cache member contains a list of changes to disk files 
            (in working folders) that we care to know about.  These files are found during
            working folder scans (in CVS mode), after operations (in all modes), and through
            filesystem watchers (in all modes).  
            
            They're saved to disk so we have some immediately on startup (scans can take
            a long time).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_KnownChanges.UpdateFromDisk">
            <summary>
            Instructs the KnownChanges to refresh its data from disk (if necessary).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.CacheMember_KnownChanges.KnownChanges">
            <summary>
            Gets the know changes hashtable.  Lock MemberLock during iteration over or modifications to this object.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_ShelvesetItems.DeserializeShelvesetItems(VaultClientOperationsLib.ChangeSetItemColl@,System.Byte[][])">
            <summary>
            take an array of items and deserialize into one ChangeSetItemColl
            </summary>
            <param name="csic"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_ShelvesetItems.SerializeShelvesetItems(VaultClientOperationsLib.ChangeSetItemColl,System.Byte[][]@)">
            <summary>
            serialize a ChangeSetItemColl into an array of byte[]
            </summary>
            <param name="csic"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.CacheMember_ShelvesetItems.DeserializeShelvesetItem(System.Object@,System.Byte[])">
            <summary>
            take one item and deserialize to a ChangeSetItemColl of length 1
            </summary>
            <param name="o"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.PendingLocalDeletion">
            <summary>
            This class contains info about a pending local deletion
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PendingLocalDeletion.RepositoryPath">
            <summary>
            The repository path
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PendingLocalDeletion.DiskPath">
            <summary>
            The disk path
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PendingLocalDeletion.ID">
            <summary>
            The object's ID
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.PendingLocalDeletion.#ctor(System.String,System.String,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="repositoryPath"></param>
            <param name="diskPath"></param>
            <param name="id"></param>
        </member>
        <member name="T:VaultClientOperationsLib.PendingLocalDeletion_Folder">
            <summary>
            This class conatins info about a pending local deletion of a folder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.PendingLocalDeletion_Folder.#ctor(System.String,System.String,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="repositoryPath"></param>
            <param name="diskPath"></param>
            <param name="id"></param>
        </member>
        <member name="T:VaultClientOperationsLib.PendingLocalDeletion_File">
            <summary>
            This class contains info about a pending local deletion of a file
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.PendingLocalDeletion_File.#ctor(System.String,System.String,System.Int64,VaultLib.VaultDateTime)">
            <summary>
            ctor
            </summary>
            <param name="repositoryPath"></param>
            <param name="diskPath"></param>
            <param name="id"></param>
            <param name="lastModificationDate"></param>
        </member>
        <member name="P:VaultClientOperationsLib.PendingLocalDeletion_File.LastModificationDate">
            <summary>
            Gets the last modification date
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.PendingChangeRepositoryDelta">
            <summary>
            This class represents the tree delta composed of the current pending changeset.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientRepository">
            <summary>
            VaultClientRepository is the object used by the client to represent
            the contents of a repository.  This object is usually accessed through
            the Repository property of the ClientInstance object.  You ordinarily
            should never construct one of these objects yourself.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._nRepID">
            <summary>
            Repository ID
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._strRepName">
            <summary>
            Repository name
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._lRevID">
            <summary>
            Revision ID
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._fRoot">
            <summary>
            Root folder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._shares">
            <summary>
            Shares
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientRepository._mustSaveEntireRepository">
            <summary>
            ResetFolderData sets to true to signal the next save must save all data.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="nRepID">The ID of the repository</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.#ctor(VaultLib.VaultRepositoryInfo,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Constructor that creates a new VaultClientRepsoitory object based on an existing VaultClientRepository object and a new root
            </summary>
            <param name="r"></param>
            <param name="root"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.#ctor(System.Int32,System.String,System.Int64,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            ctor
            </summary>
            <param name="nRepID"></param>
            <param name="strRepName"></param>
            <param name="lRevision"></param>
            <param name="fRoot"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.ResetFolderData">
            <summary>
            Resets folder data for this repository
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Update(VaultLib.VaultRepositoryDelta,VaultClientOperationsLib.TreeCache)">
            <summary>
            Update the VaultClientRepository with a VaultRepositoryDelta.
            
            THIS IS A DANGEROUS FUNCTION.  It can fail during the merge and leave 
            itself in a corrupt state.  Save a copy of any instances of this class
            before calling Update, catch any exceptions, and be ready to rollback.
            </summary>
            <param name="delta">The delta object to apply.</param>
            <param name="treeCache"></param>
            <returns>true if objects were updated, false if no objects were updated.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Write(System.IO.Stream)">
            <summary>
            Writes a repository to a stream faster than Microsoft binary serialization.
            </summary>
            <param name="outputStream">The output stream to write the repository to.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Write_2(System.IO.BinaryWriter)">
            <summary>
            Writes format version 2.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Read(System.IO.Stream)">
            <summary>
            Reads a repository from a stream faster than Microsoft binary serialization.
            If the file is read in as the older Microsoft serialized file, it will be
            immediately rewritten as the new style before this function returns.
            For this reason, the inputStream must be ReadWrite.
            </summary>
            <param name="inputStream">The stream to read the repository from.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.ReadSummary(System.IO.Stream)">
            <summary>
            Reads a repository from a stream faster than Microsoft binary serialization.
            This function returns a VaultClientRepository with no root folder (or any
            subfolders) filled in.  Useful for comparing repository version information.
            </summary>
            <param name="inputStream">The stream to read the repository from.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Read(System.IO.Stream,System.Boolean)">
            <summary>
            This version of read acts as the full read and the summary-only read.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Read_1(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Reads format version 1.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Read_2(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Reads format version 2.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.CloneShares(System.Collections.Hashtable)">
            <summary>
            Method will clone the passed in hash table.
            </summary>
            <param name="origShares"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepository.Clone">
            <summary>
            Method to completely clone a repository
            </summary>
            <returns></returns>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.RepID">
            <summary>
            The ID of the repository on the Vault server.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.RepName">
            <summary>
            The name of the repository.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.RevID">
            <summary>
            The revision ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.Root">
            <summary>
            The root folder of the repository.  Once you obtain this object, you can
            use it to iterate over everything in the repository.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.Shares">
            <summary>
            Returns a hashtable of the object IDs that are currently shared in the repository.
            The hashtable key is a long (the object's ID), and the value is not used (null).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.Display">
            <summary>
            The Display property is implemented so we can pass a collection
            of these objects to a data-bound control, and it can derive a
            display string for an item from here.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepository.Value">
            <summary>
            The Value property is implemented so we can pass a collection
            of these objects to a data-bound control, and it can derive a
            value for an item from here.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetAllReleases(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.BeginGetAllReleases(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.EndGetAllReleases(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetAllReleasesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetAllReleasesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetByReleaseId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.BeginGetByReleaseId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.EndGetByReleaseId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetByReleaseIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetByReleaseIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.AddRelease(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.BeginAddRelease(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.EndAddRelease(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.AddReleaseAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.AddReleaseAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.UpdateRelease(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.BeginUpdateRelease(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.EndUpdateRelease(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.UpdateReleaseAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.UpdateReleaseAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.DeleteRelease(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.BeginDeleteRelease(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.EndDeleteRelease(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.DeleteReleaseAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.DeleteReleaseAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetAllReleasesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.GetByReleaseIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.AddReleaseCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.UpdateReleaseCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.ReleaseHandler.DeleteReleaseCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.ReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.ParentReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.ReleaseTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.Name">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.StartDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.DueDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.VelocityStartDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.ReleaseStatusTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.Path">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.IsActive">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.Projects">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.Release.HasChildren">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetAllReleasesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetAllReleasesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetAllReleasesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetByReleaseIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetByReleaseIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.GetByReleaseIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.AddReleaseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.AddReleaseCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.AddReleaseCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.UpdateReleaseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.ReleaseService.DeleteReleaseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.GetLockTimeout(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.BeginGetLockTimeout(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.EndGetLockTimeout(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.GetLockTimeoutAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.GetLockTimeoutAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.AcquireLock(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.BeginAcquireLock(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.EndAcquireLock(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.AcquireLockAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.AcquireLockAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.RefreshLock(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.BeginRefreshLock(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.EndRefreshLock(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.RefreshLockAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.RefreshLockAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.ReleaseLock(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.BeginReleaseLock(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.EndReleaseLock(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.ReleaseLockAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.ReleaseLockAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.GetLockTimeoutCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.AcquireLockCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.RefreshLockCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.LockHandler.ReleaseLockCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ItemTypes.Incident">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.GetLockTimeoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.GetLockTimeoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.GetLockTimeoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.AcquireLockCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.AcquireLockCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.AcquireLockCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.RefreshLockCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.RefreshLockCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.RefreshLockCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.LockService.ReleaseLockCompletedEventHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.OnTimeIntegrationComponent.RefreshReleases">
            <summary>
            Note, this method should be called AFTER the projects have been retrieved.
            Releases have a dependency on the projects.  If a project is not found
            for a release, this method will look it up and update the project hash.
            Better performance will be achieved if this method is called directly
            after calling RefreshProjects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UpdateAxosoftOnTimeItemsThread">
            <summary>
            This class represents the thread used to update Axosoft OnTime Items
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UpdateAxosoftOnTimeItemsThread.ThreadProc">
            <summary>
            The main thread proccesing loop.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.BackupFile">
            <summary>
            This class represents a backup file for a VaultClientFile.  
            You can use this class to restore or delete a backup file.  
            
            To get all the backup files for a specific VaultClientFile 
            object, use the BackupDirectory class.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.#ctor(System.String,System.String,VaultClientOperationsLib.VaultClientFile)">
            <summary>
            BackupFile constructor.
            </summary>
            <param name="name">The full backup filename (version/date encoding intact).</param>
            <param name="diskPath">The full physical path to the backup file.</param>
            <param name="file">The VaultClientFile - some version of the original file the backup was made from.</param>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.parseName">
            <summary>
            The backup filename is composed of the name of the backed up file
            plus several pieces of encoded information.  This method exists to 
            extract and store the encoded information in a usable form.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.Equals(System.Object)">
            <summary>
            Override of Object.Equals to enable the use of ArrayList.Contains(BackupFile).
            </summary>
            <param name="obj"></param>
            <returns>True if the obj is a BackupFile and the Name properties match, otherwise false.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.Equals(VaultClientOperationsLib.BackupFile)">
            <summary>
            Compares two BackupFile objects for equality.
            </summary>
            <param name="f">The BackupFile object to compare.</param>
            <returns>True if the Name properties of the BackupFile objects match, otherwise false.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.RestoreBackup(VaultClientOperationsLib.ClientInstance)">
            <summary>
             Replace the working file with the backup file represented by this object.
            </summary>
            <param name="ci">A ClientInstance object to allow access to the working folder.</param>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.DeleteBackup">
            <summary>
            Deletes the backup file represented by this object from disk.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.Name">
            <summary>
            Gets the full name of the backup file.
            possible formats:
            without baseline version:  filename.extension.yyyy-MM-dd.HH-mm-ss.ffff
            with the baseline version: filename.extension.version.displayversion.yyyy-MM-dd.HH-mm-ss.ffff
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.Filename">
            <summary>
            Gets the actual filename (filename.extension).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.DiskPath">
            <summary>
            Gets the physical path to the backup file including the full filename.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.Date">
            <summary>
            Gets the date/time the backup was created as a DateTime.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.DisplayDate">
            <summary>
            Gets the date/time the backup was created as a display-friendly string.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.DisplayVersion">
            <summary>
             Gets a string representation of the display-friendly baseline version.
             ("N/A" if the backup file is old and had no version info)
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.BackupFile.HasBaselineVersion">
            <summary>
            True if the backup filename included a baseline version (req. for restoring backup files)
            else false (older backup files will have no baseline version encoded into the filename).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.BackupFile.BackupFileComparer">
            <summary>
            This class implements the IComparer interface.  It allows an ArrayList of BackupFile
            objects to be sorted in the fashion indicated by the specified BackupFileSortType.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BackupFile.BackupFileComparer.#ctor(VaultClientOperationsLib.BackupFile.BackupFileSortType)">
            <summary>
            Creates a new BackupFileComparer with the specified BackupFileSortType.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:VaultClientOperationsLib.UploadItem_Data">
            <summary>
            Used to describe an update that includes using a file delta we downloaded
            as well as attributes the user desired for this get.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.BugUpdateThread">
            <summary>
            Summary description for BugUpdateThread.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.BugUpdateThread.CreateThreadInstance(System.Threading.Thread@,VaultClientOperationsLib.BugUpdateThread@)">
            <summary>
            This is the function you want to use to create a PingThread (a new thread).
            </summary>
            <param name="newThread">A Thread variable to receive the created Thread.</param>
            <param name="threadClass">An UpdateThread variable to receive the created UpdateThread class.</param>
        </member>
        <member name="T:VaultClientOperationsLib.RegistryKeys">
            <summary>
            A static class for getting default registry settings for all parts of the app.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.PromptForOverwriteCallback">
            <summary>
            Delegate for prompting to overwrite a modified file, returns false to cancel a transaction
            </summary>
            
        </member>
        <member name="T:VaultClientOperationsLib.OverwritePrompt">
            <summary>
            Class containing some state info and a function to call a delegate function
            to prompt the user whether or not to overwrite a file.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.OverwritePrompt.DoPrompt(VaultClientOperationsLib.WorkingFolder,VaultClientOperationsLib.VaultClientFile,System.String,System.String,VaultClientOperationsLib.MergeType@)">
            <summary>
            Call the delegate to prompt for a file overwrite
            </summary>
            <param name="wf">WorkingFoolder that the file resides in</param>
            <param name="file">VaultClientFile that is being retrieved</param>
            <param name="origFile">string path to the file being overwritten</param>
            <param name="newFile">string path to the file doing the overwriting</param>
            <param name="mergeType">merge state returned by the prompt</param>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.LoginProfiles">
            <summary>
            Summary description for LoginProfiles.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.LoginProfiles.Save_Version_1(System.IO.BinaryWriter)">
            <summary>
            Saves profiles using version 1 of the profile file format.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.LoginProfiles.Profile.Save_Version_1(System.IO.BinaryWriter)">
            <summary>
            Saves profile info using version 1 of the profile file format.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.LoginProfiles.Profile.Read_Version_1(System.IO.BinaryReader)">
            <summary>
            Reads profile info using version 1 of the profile file format.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ClientInstance">
            <summary>
            Encapsulates one Vault server connection and all the source-control-related
            high-level operations a Vault client would need to perform.  No Windows
            interfaces for gathering data are provided; all methods require full
            qualification.  Look at the VaultClientPresentationLib for a higher-level
            interface that provides Windows UI where needed.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ClientInstance._workingFolderCacheCollectThreshold">
            <summary>
            When this many working folder instances are removed from the cache, GC.Collect is
            called to reclaim some of the unreferenced instances (and their system mutex
            handles).  A higher value means more (possibly unreferenced) instances
            can hang around in memory until memory pressure forces the GC to run.  A lower
            number means the GC will be run more often, and fewer unreferenced instances will 
            persist.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ClientInstance._workingFolderCacheCollectTally">
            <summary>
            The running tally of instances that have been removed from the cache.
            When this count reaches _workingFolderCacheCollectThreshold, GC.Collect
            is called.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ClientInstance.UseUpdateThread">
            <summary>
            Whether to use the update thread when downloading files.  Useful for web services
            using impersonation since new threads don't have the impersonation credentials.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ClientInstance.UseFileSystemWatchers">
            <summary>
            Whether to use file system watcher classes.  Should always be on for GUI clients
            that want to know when files in working folders have changed.  Should be off for
            command-line clients for efficiency (they always do full scans anyway) and portability
            (mono as of 2004.01.20 doesn't support the FileSystemWatcher class).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ClientInstance._connectionState">
            <summary>
            The event raised when commit's refresh generates a repository delta.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.LoadDefaultLocalOptions">
            <summary>
            Make sure that options that are stored locally have the right default values.  Note
            that this must be called after we get the options stored on the server, since some default
            values depend on whether previous versions of the client have the same server options.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateWorkingFolderOptionsFromUserOptions">
            <summary>
            Updates the settings in the working folder options from the user options 
            that were retrieved from the server or are about to be sent to the server.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.#ctor">
            <summary>
            Constructs a ClientInstance.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Init(VaultClientNetLib.VaultConnection.AccessLevelType)">
            <summary>
            Initializes the ClientInstance.  The Connection class is created here.  
            This function may take a few seconds to complete while the I/O paths are initialized.
            
            This method must be called before Login().
            
            WARNING : Do not call this function in a user-abortable section of a worker
            thread.  If the Connection's InitService() is interrupted, the web
            service classes for this process will be hosed until the process
            is restarted.
            </summary>
            <param name="accessLevel"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Abort">
            <summary>
            Aborts the current operation, if there is one.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Login(System.String,System.String,System.String)">
            <summary>
            Logs the given username into the server at urlbase.  Before calling this method you must call Init().
            </summary>
            <param name="urlbase">The base URL to the Vault server.  A base URL lacks the service file name ("VaultService.asmx")  For example: "http://hostname/VaultService/"</param>
            <param name="username">The name of the user</param>
            <param name="password">The user's password</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.SetActiveRepositoryID(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the repository ID for this client instance.  Vault's protocol allows multiple
            repositories to be accessed and modfied through a single authenticated session.
            The ClientInstance class requires that its user chooses an active repository ID
            before any repository operations are performed.  This ID can be changed during
            an instance of ClientInstance.
            
            This function incurrs no network traffic unless "doRefresh" is true.
            </summary>
            <param name="id">The repository ID to make active.</param>
            <param name="username">The name of the user currently authenticated.  This parameter is used to resolve the local cache for this repository.</param>
            <param name="uniqueRepositoryID">The unique repository identifier string.  This parameter is used to resolve the local cache for this repository.</param>
            <param name="doRefresh">Immediately refresh the tree cache for this repository.</param>
            <param name="updateKnownChangesAll">If set to true, update all known changes by scanning each working folder.  This should be true if the repository id is -1, and can be set as desired otherwise.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Logout">
            <summary>
            Logs the user out of the currently active session.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ListRepositories(VaultLib.VaultRepositoryInfo[]@)">
            <summary>
            Retrieves a list of repositories from the server.  
            </summary>
            <param name="reps">The new VaultRepositoryInfo[] will be created and stored at the variable referenced by this parameter.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ListUsers(VaultLib.VaultUser[]@)">
            <summary>
            Retrieves a list of users from the server
            </summary>
            <param name="vUsers">The new VaultUser[] will be created and stored at this variable</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ListAllBranchPoints(VaultLib.VaultBranchPointInfo[]@)">
            <summary>
            Retrieves an array of branch points from the server
            </summary>
            <param name="points">The VaultBranchPointInfo[] to store the results in</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ListDeletedObjects(System.String,System.Boolean)">
            <summary>
            Get a list of deleted objects from the server
            </summary>
            <param name="path">Path to the folder</param>
            <param name="recursive">true if recursive</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetFileVersionTxComment(System.String)">
            <summary>
            Return the tx comment for the VERSION of the item found at strPath.  This
            method will use  a history query for the item 
            returning the ONE row of history for that specific version.  
            Note, this uses the item's TxDate to determine that version.
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetFolderVersionTxComment(System.String)">
            <summary>
            Return the tx comment for the VERSION of the item found at strPath.  This
            method will use a VERSION history query for the item 
            returning the ONE row of history for that specific version.  
            Note, this uses the item's TxDate to determine that version.
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetFolderProperties(System.String,System.Int64)">
            <summary>
            Retrieves properties and share information for a folder from the client tree cache
            </summary>
            <param name="strPath"></param>
            <param name="nFolderVerID"></param>
            <returns>the VaultFolderProperties for the folder</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetFileProperties(System.String,System.Int64)">
            <summary>
            Retrieves properties and share information for a file from the server
            </summary>
            <param name="strPath"></param>
            <param name="nFileVerID"></param>
            <returns>VaultFileProperties for the file</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetSharedPaths(System.Int64)">
            <summary>
            Retrieves share information for a specific object ID (file or folder)
            </summary>
            <param name="vcobjID"></param>
            <returns>VaultFileProperties for the file</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetWorkingFolder(System.String,System.Boolean)">
            <summary>
            Get the WorkingFolder for a given folder
            </summary>
            <param name="strWorkingFolder">The folder to retrieve the WorkingFolder for</param>
            <param name="bMakeBackups"></param>
            <returns>If successful, return the WorkingFolder object, otherwise return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetWorkingFolder(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Get the WorkingFolder for a given VaultClientFolder.
            </summary>
            <param name="vcfolder"></param>
            <returns>If successful, return the WorkingFolder object, otherwise return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetLabelWorkingFolder(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Get the WorkingFolder for a given VaultClientFolder.  Reads mappings from the
            special labels working folder table, otherwise is the same as GetWorkingFolder
            (compatible objects are returned).
            </summary>
            <param name="vcfolder"></param>
            <returns>If successful, return the WorkingFolder object, otherwise return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.FindOrCreateWorkingFolder(System.String,System.Boolean)">
            <summary>
            Finds or creates a WorkingFolder for the specified disk path
            </summary>
            <param name="diskPath"></param>
            <param name="makeBackups"></param>
            <returns>If successful, return the WorkingFolder object, otherwise return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.RefreshWorkingFolderCache">
            <summary>
            Updates each cached WorkingFolder instance to look in the correct place for
            hidden state files.  Call after the option to store state files in working folders
            changes.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetWorkingFolder(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Get the WorkingFolder for a given VaultClientFile.
            </summary>
            <param name="vcfile"></param>
            <returns>If successful, return the WorkingFolder object, otherwise return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.LocalRefresh">
            <summary>
            Just notifies the view controls to refresh.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Refresh">
            <summary>
            Gets the tree structure from the server and updates the local cached copy.
            </summary>
            <returns>true on success, false if the cache could not be updated.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Refresh(System.Int64)">
            <summary>
            Gets the tree structure from the server and updates the local cached copy.
            </summary>
            <param name="knownServerRevision">The latest known server revision.  If the cache is as new as this version, no network operation is made.</param>
            <returns>true on success, false if the cache could not be updated.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Refresh(VaultLib.VaultRepositoryDelta,System.Int64)">
            JCC - I noticed this signature does not have a ref value
            for the returned revision.  Is that what is the desired
            behavior for this method?
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetCheckOuts(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Retrieve a list of the users who have checked out the given VaultClientFile
            </summary>
            <param name="file">The VaultClientFile to search for</param>
            <returns>A string containing the list of users who have checked this file out.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UndoCheckOut(VaultClientOperationsLib.VaultClientFile,VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Undoes the checkout on a file.
            </summary>
            <param name="file"></param>
            <param name="localCopy"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UndoCheckOut(VaultClientOperationsLib.VaultClientFile[],VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Undoes checkouts on an array of files
            </summary>
            <param name="files"></param>
            <param name="localCopy"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UndoCheckOut(VaultClientOperationsLib.VaultClientFolder,System.Boolean,VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Undoes the checkouts on all files in a folder
            </summary>
            <param name="folder"></param>
            <param name="recursive"></param>
            <param name="localCopy"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UndoCheckOut(VaultClientOperationsLib.VaultClientTreeObject[],System.Boolean,VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Undoes the checkouts on collection of files and folders.
            </summary>
            <param name="objects"></param>
            <param name="recursive"></param>
            <param name="localCopy"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ChangePassword(System.String,System.String)">
            <summary>
            Changes the user's password
            </summary>
            <param name="oldPassword">The old password</param>
            <param name="newPassword">The new password</param>
            <returns>Always returns True.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit">
            <summary>
            Performs a transaction commit on the internal change set.
            </summary>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Performs a transaction commit on all the given change set items.  This method does
            not automatically include the internal change set items in the operation.  However,
            if the change set items in the supplied parameter is found in the internal change set,
            it is removed after transaction completion.
            </summary>
            <param name="changeSetItems">A collection of change set items to commit.</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit_VSSImport(VaultClientOperationsLib.ChangeSetItemColl,VaultLib.VaultDateTime,System.Int32)">
            <summary>
            Performs a transaction commit on all the given change set items.  This method does
            not automatically include the internal change set items in the operation.  However,
            if the change set items in the supplied parameter is found in the internal change set,
            it is removed after transaction completion.
            </summary>
            <param name="givenItems">A collection of change set items to commit.</param>
            <param name="dtg">The VaultDateTime of the transaction.</param>
            <param name="nUserID">The userID of the user who performed this transaction.</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit(VaultClientOperationsLib.ChangeSetItemColl,System.Boolean,System.Boolean)">
            <summary>
            Performs a transaction commit on all the given change set items.  This method does
            not automatically include the internal change set items in the operation.  However,
            if the change set items in the supplied parameter is found in the internal change set,
            it is removed after transaction completion.
            </summary>
            <param name="givenItems">A collection of change set items to commit.</param>
            <param name="keepCheckedOut">Whether to keep files checked out after the commit.</param>
            <param name="removeLocalCopy">Whether to remove the local copy after a commit.</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit(VaultClientOperationsLib.ChangeSetItemColl,System.Boolean,System.Boolean,System.Int64@)">
            <summary>
            Performs a transaction commit on all the given change set items and fills in the revision
            ID.  This method does not automatically include the internal change set items in the operation.  However,
            if the change set items in the supplied parameter is found in the internal change set,
            it is removed after transaction completion.
            </summary>
            <param name="givenItems">A collection of change set items to commit.</param>
            <param name="keepCheckedOut">Whether to keep files checked out after the commit.</param>
            <param name="removeLocalCopy">Whether to remove the local copy after a commit.</param>
            <param name="revID">The new revision id as a result of the commit</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Commit(VaultClientOperationsLib.ChangeSetItemColl,System.String,System.Boolean,System.Boolean,VaultClientOperationsLib.CommitType,VaultLib.VaultDateTime,System.Int32,System.Int64@,System.Int32[]@)">
            <summary>
            Performs a transaction commit on all the given change set items.  This method does
            not automatically include the internal change set items in the operation.  However,
            if the change set items in the supplied parameter is found in the internal change set,
            it is removed after transaction completion.
            </summary>
            <param name="givenItems">A collection of change set items to commit.</param>
            <param name="strChangeSetComment"></param>
            <param name="keepCheckedOut">Whether to keep files checked out after the commit.</param>
            <param name="removeLocalCopy">Whether to remove the local copy after a commit.</param>
            <param name="committype">Defines which type of commit is being used.</param>
            <param name="dateImport">The date the transaction should use for imported events.</param>
            <param name="nUserIDImport">The userID of the user who performed this transaction.</param>
            <param name="nRevID"></param>
            <param name="retBegEndTx"></param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CloakOrUnCloak(System.String,System.Boolean)">
            <summary>
            Cloaks or uncloaks the object at the given path
            </summary>
            <param name="fullpath">Path to the object to cloak/uncloak</param>
            <param name="bCloak">True to cloak, False to uncloak</param>
            <returns>Always returns True</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.RefreshCloakedObjectsList">
            <summary>
            Refreshes the list of cloaked objects from the server
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.RefreshRepositoryOptions">
            <summary>
            Refresh the set of Repository Options from the server
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.PerformPendingLocalDeletions(System.String,VaultClientOperationsLib.PerformDeletionsType)">
            <summary>
            Perform any pending deletions for files that have the given repositoryFolderPrefix.
            </summary>
            <param name="repositoryFolderPrefix">The repository folder prefix to use to determine which deletions should be performed.</param>
            <param name="performDeletions"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.FindVersionsByCRCs(VaultLib.VaultVersionByCRCRequest[]@)">
            <summary>
            Processes an array of VaultVersionByCRCRequest requests.
            Each request that does not get a hit will have the objverid set to 0
            </summary>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.FindVersionsByCRCs(System.Int64,System.UInt32)">
            <summary>
            Returns the objverid of the latest version of the file that matches the CRC provided.
            Will return 0 if the object is not found.
            
            NOTE:  This should only be used if only one file needs to be investigated.  If 
            multiple files need to be checked, use the version that takes a VaultVersionByCRCRequest[].
            </summary>
            <param name="objid"></param>
            <param name="fileCRC"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_RefreshKnown(System.Boolean)">
            <summary>
            Refreshes any _already_ known changes (includes all checked out files when in VSS mode) to get new statuses.
            </summary>
            <param name="doNotify">When true, call NotifyChangeSetItemsChanged.  When false, do not.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_All(System.Boolean)">
            <summary>
            Walks through all known working folders and finds any file changes,
            makes a change set object for it, and saves these to the _knownChanges
            Hashtable.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_Folders_Background(VaultClientOperationsLib.VaultClientFolderColl,System.Boolean,System.Boolean)">
            <summary>
            Update known changes for the provided folders, but de-duplicate them first so each folder is updated only once.
            </summary>
            <param name="folders"></param>
            <param name="notifyChangeSetItemsChanged"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateGhostFolders(VaultClientOperationsLib.VaultClientFolder,VaultClientOperationsLib.WorkingFolder@)">
            <summary>
            Update the ghost folders in the working folder.  Returns true if updates were made
            false if no updates were made
            </summary>
            <param name="folder"></param>
            <param name="wf"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsFolderExcluded(System.String)">
            <summary>
            Consults the exclusion list, returns whether the provided folder should be excluded.
            </summary>
            <param name="strFoldername"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsFileExcluded(System.String)">
            <summary>
            Consults the exclusion list, returns whether the provided file should be excluded based on its extension.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_PurgeAllInFolder(System.String)">
            <summary>
            Removes any known changes for files inside the given disk folder.  This is used to
            avoid a full scan of all working folders after a working folder path is removed
            (we just remove the ones we know to be bad).
            </summary>
            <param name="diskFolder">The disk folder to purge changes for (and all subdirectories under it that aren't in other working folders).</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_PurgeForCloak(System.String)">
            <summary>
            Removes any known changes that are in or beneath the given repositoryFolder (which
            is being cloaked).
            </summary>
            <param name="repositoryPath">The repository folder that is being cloaked.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_File(VaultClientOperationsLib.VaultClientFolder,System.String,System.Boolean)">
            <summary>
            Update the known changes for a single file.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_File(VaultClientOperationsLib.WorkingFolder,VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Update the known changes for a file
            </summary>
            <param name="wf"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateKnownChanges_File(VaultClientOperationsLib.VaultClientFolder,System.String,System.Boolean,VaultClientOperationsLib.WorkingFolder)">
            <summary>
            Use this version if you have a WorkingFolder instance you know is correct for this file.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_Append(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Append a collection of change set items to the internal change set list
            </summary>
            <param name="items">The collection of items to append</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_Append(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Append a single change set item to the internal change set item list
            </summary>
            <param name="item">The item to append</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_Undo(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Undoes an item from the internal change set list
            </summary>
            <param name="item">The item to undo</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_GetItems(System.Boolean)">
            <summary>
            Gets the items stored in the internal change set.  The collection will consists
            only of items added through other InternalChangeSet_() functions.  Items with
            types such as "FileAdd", "FolderAdd", "FileDelete", etc. will be stored in this
            internal change set, because they should not be stored in working folders.
            </summary>
            <param name="sortByDate">Set to true to retrieve the results sorted by date.  If set to false, the results will be returned in random order.</param>
            <returns>A ChangeSetItemColl with the items in the InternalChangeSet.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_GetComment">
            <summary>
            Retrieve the comment associated with the internal change set
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_SetComment(System.String)">
            <summary>
            Set the comment associated with the internal change set
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_ResetComment">
            <summary>
            Clear the comment associated with the internal change set
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_SetItemComment(VaultClientOperationsLib.ChangeSetItem,System.String)">
            <summary>
            Set the comment on an individual item in the internal change set
            </summary>
            <param name="item">The item to set the comment on</param>
            <param name="comment">The comment to set</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_ResetItemComments(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Removes many item comments more efficiently.  Does not notify view controls
            that change set items changed.  This function is for massive cleaning up of
            item comments (for example, after a commit succeeds).
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.InternalChangeSet_ResetItemComment(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Clears the comment on an individual item in the change set
            </summary>
            <param name="item">The item whose comment is to be cleared</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Refresh(System.Int64,System.Boolean,VaultLib.VaultRepositoryDelta@,System.Int64@,VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Does the real work of refreshing the tree cache by asking the server for the tree structure.
            </summary>
            <param name="knownServerRevision">The version the user thinks the server is currently at.  If VaultDefine.Latest, always requests the update.</param>
            <param name="isRetry">Set to true if we are calling this function recursively, to handle an exception.</param>
            <param name="delta">The returned delta from refresh</param>
            <param name="returnedRevision">the returned revision of the delta</param>
            <returns>true on success, false if the cache could not be updated.</returns>
            <param name="committedItems">If items were just committed they must be provided here so the pending change repository can ignore them.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.FinalizeChangeSetItems(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Finalizes a ChangeSetItemColl for commit.  All AddFolder items are converted into
            multiple CreateFolder and AddFile items.  A new list of the finalized items is
            returned.
            </summary>
            <param name="items">The collection to finalize.</param>
            <returns>A new ChangeSetItemColl with the finalized items.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.MakeRecursiveListForDirectory(System.IO.DirectoryInfo,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Retrieve a list of folders and files in the given directory, skipping subdirectories named "_sgvault" (or similar).
            </summary>
            <param name="di">The directory to check</param>
            <param name="folders">A list of the folders in the directory</param>
            <param name="files">A list of the files in the directory</param>
            <param name="skipSGHiddenFolders">If true, skip folders named _sgvault, _sgbak, .sgvault, and .sgbak.  If false, skip no folders.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetAllFolders(VaultClientOperationsLib.VaultClientFolder,System.Collections.ArrayList@)">
            <summary>
            Gets all folders recursively, appending each found folder to the supplied folders ArrayList.
            </summary>
            <param name="folder">The folder to start searching at.</param>
            <param name="folders">The ArrayList to append found folders to.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.EmitMessage(VaultClientOperationsLib.ProgressMessage)">
            <summary>
            Raise the event that signals a new message is available.
            </summary>
            <param name="message">The message to pass as event data.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.EmitBulkMessages(System.Collections.ArrayList)">
            <summary>
            Raise the event that signals a new message is available.
            </summary>
            <param name="aProgressMessages"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.EmitCommitWarning(System.String,System.Boolean)">
            <summary>
            Raise the commit warning event handler
            </summary>
            <param name="message"></param>
            <param name="reconnect"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.NotifyChangeSetItemsChanged">
            <summary>
            Raise the event that signals the change set item list has changed
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.RenamedEventHandler(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler for handling rename events
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CheckOut(VaultClientOperationsLib.VaultClientFile,System.Byte,System.String)">
            <summary>
            Checks out an individual file
            </summary>
            <param name="file">The file to check out</param>
            <param name="checkOutType">The type of check out to perform</param>
            <param name="comment">A comment for this check out</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CheckOut(VaultClientOperationsLib.VaultClientFile[],System.Byte,System.String)">
            <summary>
            Checks out an array of files
            </summary>
            <param name="files">The files to check out</param>
            <param name="checkOutType">The type of check out to perform</param>
            <param name="comment">A comment for this check out</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CheckOut(VaultClientOperationsLib.VaultClientFolder,System.Boolean,System.Byte,System.String)">
            <summary>
            Checks out all files in a folder
            </summary>
            <param name="folder">The folder to check out</param>
            <param name="recursive">True to check out recursively</param>
            <param name="checkOutType">The type of check out to perform</param>
            <param name="comment">A comment for this check out</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CheckOut(VaultClientOperationsLib.VaultClientTreeObject[],System.Boolean,System.Byte,System.String)">
            <summary>
            Checks out an array of Tree objects
            </summary>
            <param name="objects">The objects to check out</param>
            <param name="recursive">Recursively checkout all files in subfolders</param>
            <param name="checkOutType">The type of check out to perform</param>
            <param name="comment">A comment for this check out</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.TokenizeDiffArgs(System.String,System.String)">
            <summary>
            This method tokenizes the diff args (based on platform - windows or unix-style) for use with the java clc.  
            NOTE:  This method was not constructed for use outside of java!
            </summary>
            <param name="diffBin"></param>
            <param name="diffArgs"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.WindowsTokenizer(System.String)">
            <summary>
            String Tokenizer for windows-style command arguments.
            NOTE:  Only intended for use with Java!
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UnixTokenizer(System.String)">
            <summary>
            String Tokenizer for unix-style command arguments.
            NOTE:  Only intended for use with Java!
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.DoShelvesetDiff(VaultLib.ShelvesetDetails,VaultLib.ShelvesetDetails,System.String,System.String,System.String,System.String,VaultClientOperationsLib.DiffShelvedAgainstType,VaultClientOperationsLib.DisplayPrompt,System.String[]@,System.String@,System.String@,System.Exception@)">
            <summary>
            
            </summary>
            <param name="leftShelveset"></param>
            <param name="rightShelveset"></param>
            <param name="strDiffBin"></param>
            <param name="strDiffArgFmt"></param>
            <param name="strLftLblFmt"></param>
            <param name="strRgtLblFmt"></param>
            <param name="diffType"></param>
            <param name="promptData">Prompt data to display non-fatal errors before bringing up diff.  Pass null to bypass.</param>
            <param name="nonFatalErrors">A string array of any non-fatal errors that occurred while getting the shelvesets to disk.</param>
            <param name="strLftFldr"></param>
            <param name="strRgtFldr"></param>
            <param name="eDiffBin"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Get(VaultClientOperationsLib.VaultClientFile,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on an individual file
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="makeWritable">The setting for writability of the file</param>
            <param name="setFileTime">The time to set on the file</param>
            <param name="merge">The merge setting for retrieving this file</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Get(VaultClientOperationsLib.VaultClientFile[],System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on an array of files
            </summary>
            <param name="files">The files to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Get(VaultClientOperationsLib.VaultClientFolder[],System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on an array of folders
            </summary>
            <param name="folders">The folders to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Get(VaultClientOperationsLib.VaultClientFolder,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on a folder
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Get(VaultClientOperationsLib.VaultClientTreeObject[],System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on a collection of folders and files
            </summary>
            <param name="objects">The folders and files to retrieve</param>
            <param name="recursive">True to retrieve folders recursively</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByDisplayVersion(VaultClientOperationsLib.VaultClientFile,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Gets a file by its displayable version instead of by object version ID to a working folder
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="makeWritable">The setting for writability of the file</param>
            <param name="setFileTime">The time to set on the file</param>
            <param name="merge">The merge setting for retrieving the file</param>
            <param name="PromptData">Data for providing overwrite prompts</param>
            <returns>The response from the server for the retrieved file.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByDisplayVersion(VaultClientOperationsLib.VaultClientFile[],VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Retrieves the given files from the server and places them in the hidden
            folders appropriate for them (these mappings are read from the TreeCache).
            This version of Get() obeys the .Version member of the VaultClientFile objects
            instead of the .ObjVerID.
            </summary>
            <param name="files">The files to retrieve.</param>
            <param name="makeWritable"></param>
            <param name="merge"></param>
            <param name="setFileTime"></param>
            <param name="PromptData"></param>
            <returns>The responses from the server, one for each given file.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToHiddenFolderOnly(VaultClientOperationsLib.VaultClientFile,System.Boolean)">
            <summary>
            Performs a get on a file, but only updates the hidden folders
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToHiddenFolderOnly(VaultClientOperationsLib.VaultClientFile[],System.Boolean)">
            <summary>
            Performs a get on an array of files, but only updates the hidden folders
            </summary>
            <param name="files">The files to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToHiddenFolderOnly(VaultClientOperationsLib.VaultClientFolder,System.Boolean,System.Boolean)">
            <summary>
            Performs a get on a folder, but only updates the hidden folders
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToNonWorkingFolder(VaultClientOperationsLib.VaultClientFile,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on a file and saves the file to a non-working folder
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorFullPath">The path to the folder that is the common ancestor of all files retrieved</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToNonWorkingFolder(VaultClientOperationsLib.VaultClientFile[],System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on an array of files and saves the files to a non-working folder
            </summary>
            <param name="files">The files to retrieve</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorFullPath">The path to the folder that is the common ancestor of all files retrieved</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToNonWorkingFolder(VaultClientOperationsLib.VaultClientFolder,System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on a folder and saves the files to a non-working folder
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetToFlatFolder(VaultClientOperationsLib.VaultClientFile[],System.String)">
            <summary>
            Performs a get on an array of files and saves the files to a non-working folder
            </summary>
            <param name="files">The files to retrieve</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByDisplayVersionToNonWorkingFolder(VaultClientOperationsLib.VaultClientFile,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Gets a file by its displayable version instead of by object version ID to a non-working folder.
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorFullPath">The path to the folder that is the common ancestor of all files retrieved</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByDisplayVersionToNonWorkingFolder(VaultClientOperationsLib.VaultClientFile[],VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Gets an array of files by their displayable version instead of by object version ID
            </summary>
            <param name="files">The files to retrieve</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorFullPath">The path to the folder that is the common ancestor of all files retrieved</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByDisplayVersionToNonWorkingFolder(VaultClientOperationsLib.VaultClientFolder,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Gets a folder by its displayable version instead of by object version ID
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recusrively</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByRegex(VaultClientOperationsLib.VaultClientFolder,System.Collections.ArrayList,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Gets all files in a folder whose name matches a given regular expression
            </summary>
            <param name="folder">The folder to start seeking files with matching names</param>
            <param name="regexList">An ArrayList of Regex objects that will be searched for matches</param>
            <param name="recursive">True to seek recursively</param>
            <param name="forceLatest">True to force the get to retrieve the latest</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByRegexToNonWorkingFolder(VaultClientOperationsLib.VaultClientFolder,System.Collections.ArrayList,System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,VaultClientOperationsLib.OverwritePrompt)">
            <summary>
            Performs a get on files in a folder whose name matches a given regular expression
            and saves the files to a non-working folder
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="regexList">An ArrayList of Regex objects that will be searched for matches</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="forceLatest">True to force the get to get the latest version</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="ancestorDiskPath">The path to use in place of the working folder</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByLabel_GetStructure(System.String,System.String,System.Int64@,System.String,System.String[]@,System.String[]@,VaultClientOperationsLib.VaultClientTreeObject@,System.Int64@)">
            <summary>
            Part 1 of GetByLabel.  Gets the label structure and returns a VaultClientTreeObject
            (a VaultClientFile or VaultClientFolder instance) that is the requested label item.
            The caller must then set working folders on this structure and proceed to 
            call GetByLabel_GetData() or GetByLabelToNonWorkingFolder_GetData() with an item
            in the structure..
            
            If labelSubItemPath is NOT specified, and currentPathToLabelItem resolves to 
            multiple items in the label (because the server does lookups based on its ID, 
            and it may be shared inside the label), false will be returned and the caller 
            must call this function again with labelSubItemPath set to one of the values
            in the returned discoveredSubItemPaths array.
            </summary>
            <param name="currentPathToLabelItem">The current path to the labelled item to get as the root of the returned delta.</param>
            <param name="labelName">The text name of the label.  Can be null if labelID is set.</param>
            <param name="labelID">The numeric ID of the label.  Can be 0 if labelName is set.</param>
            <param name="labelSubItemPath">The inside-the-label path of the item (file or folder) that you want to be the root of the returned delta.  Can be null, but if the ID of currentPathToLabelItem is found mlutiple times in the label, multiple paths will be returned in discoveredSubItemPaths.</param>
            <param name="discoveredSubItemPaths">All possible paths belonging to currentPathToLabelItem in the label structure.</param>
            <param name="discoveredObjSubItemPaths">All possible paths (in Object ID) belonging to currentPathToLabelItem in the label structure.</param>
            <param name="labelStructure">The label structure starting at the supplied currentPathToLabelItem (wherever it appeared in the label).</param>
            <param name="rootID">The ID of the file or folder that is the root of the label structure (the object at which the label was created).</param>
            <returns>true if the label structure was retrieved successfully, false if there were problems (including discoveredSubItemPaths.Length > 1).</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByLabel_GetData(VaultClientOperationsLib.VaultClientFile,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt,System.Int64,System.String,System.String)">
            <summary>
            Performs a get on an individual file in a label.
            </summary>
            <param name="file">The file to retrieve</param>
            <param name="makeWritable">The setting for writability of the file</param>
            <param name="setFileTime">The time to set on the file</param>
            <param name="merge">The merge setting for retrieving this file</param>
            <param name="PromptData"></param>
            <param name="labelID">The label's ID.  Comes back as ID in VaultLabelItemX.</param>
            <param name="currentPathToLabelItem">The current path to the label item.  Used by the server for authorization.</param>
            <param name="labelSubItemPath">The label-root-relative path to the subitem that is the root of the labelStructure that file is in.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByLabel_GetData(VaultClientOperationsLib.VaultClientFolder,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,VaultClientOperationsLib.OverwritePrompt,System.Int64,System.String,System.String)">
            <summary>
            Performs a get on a folder in a label.
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="merge">The merge setting for retrieving these files</param>
            <param name="labelID">The label's ID.  Comes back as ID in VaultLabelItemX.</param>
            <param name="currentPathToLabelItem">The current path to the label item.  Used by the server for authorization.</param>
            <param name="labelSubItemPath">The label-root-relative path to the subitem that is the root of the labelStructure.</param>
            <param name="PromptData"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetLabeledFileToNonWorkingFolder(VaultClientOperationsLib.VaultClientFile,System.String,System.String,System.String@)">
            <summary>
            Gets a file by a label name to the local disk
            </summary>
            <param name="vcRepFile">The repository file to get</param>
            <param name="strLabelName">The label name applied to the file</param>
            <param name="strLabelPath"></param>
            <param name="strLocalPath">The location on disk to place the file.  Pass in null to put file in temp folder.  Returns full path
            to the file retrieved</param>
            <returns>true if file successfully retrieved, false otherwise</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetLabeledFolderToNonWorkingFolder(VaultClientOperationsLib.VaultClientFolder,System.String,System.String,System.String@,System.Boolean)">
            <summary>
            Gets a folder by a label name to the local disk
            </summary>
            <param name="vcRepFolder">The repository folder to get</param>
            <param name="strLabelName">The label name applied to the folder</param>
            <param name="strLabelPath"></param>
            <param name="strLocalDir">The location on disk to place the folder.  Pass in null to create a temporary folder</param>
            <param name="bRecursive">Whether to get the label recursively</param>
            <returns>true if folder label succesfully retrieved, false otherwise</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByLabelToNonWorkingFolder_GetData(VaultClientOperationsLib.VaultClientFile,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,VaultClientOperationsLib.OverwritePrompt,System.Int64,System.String,System.String)">
            <summary>
            Performs a get on a file and saves the file to a non-working folder
            </summary>
            <param name="file">The file to retrieve.  This file must have a non-null .Parent!</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="destinationDiskPath">Where to put the file on disk.</param>
            <param name="PromptData"></param>
            <param name="labelID">The label's ID.  Comes back as ID in VaultLabelItemX.</param>
            <param name="currentPathToLabelItem">The current path to the label item.  Used by the server for authorization.</param>
            <param name="labelSubItemPath">The label-root-relative path to the subitem that is the root of the labelStructure that file is in.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetByLabelToNonWorkingFolder_GetData(VaultClientOperationsLib.VaultClientFolder,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,System.String,VaultClientOperationsLib.OverwritePrompt,System.Int64,System.String,System.String)">
            <summary>
            Performs a get on a folder and saves the files to a non-working folder
            </summary>
            <param name="folder">The folder to retrieve</param>
            <param name="recursive">True to retrieve recursively</param>
            <param name="overwrite">True to overwrite any existing files in the destination folder</param>
            <param name="makeWritable">The setting for writability of the files</param>
            <param name="setFileTime">The time to set on the files</param>
            <param name="destinationDiskPath">Where to assign the given folder to disk.</param>
            <param name="PromptData"></param>
            <param name="labelID">The label's ID.  Comes back as ID in VaultLabelItemX.</param>
            <param name="currentPathToLabelItem">The current path to the label item.  Used by the server for authorization.</param>
            <param name="labelSubItemPath">The label-root-relative path to the subitem that is the root of the labelStructure that files are in.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CreateDiskFoldersForNonWorkingFolder(VaultClientOperationsLib.VaultClientFolderColl,System.String,System.String)">
            <summary>
            Creates disk folders like CreateDiskFolders but for gets to non-working folders
            </summary>
            <param name="folders">The folders to create.</param>
            <param name="ancestorFullPath">The full path to the common ancestor folder of all the given folders.</param>
            <param name="ancestorDiskPath">The disk path to be used instead of looking up the working folder for the ancestorFullPath.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ConvertPathToNonWorkingDiskPath(System.String,System.String,System.String)">
            <summary>
            Convert a repository path into a non-working folder disk path.
            Any instance of ancestorFullPath at the start of a file will be
            replaced with ancestorDiskPath, and sub-items will be re-written as
            filesystem subdirectories and files.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ProcessGetFileRequests(VaultClientOperationsLib.GetFileInfo[],VaultClientOperationsLib.MakeWritableType,VaultClientOperationsLib.SetFileTimeType,VaultClientOperationsLib.MergeType,System.Boolean,System.String,System.Boolean,System.String,VaultClientOperationsLib.OverwritePrompt,System.Boolean,System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Does the work behind the Get() series of functions.  Takes VaultClientFile and VaultRequestGetFile 
            objects and downloads each of them into their hidden folders.  This function handles 
            regular and label gets.
            </summary>
            <param name="infos">An array of GetFileInfo instances representing the files to process.</param>
            <param name="makeWritable">The writable style to use for these files.</param>
            <param name="setFileTime">The file time style to use for these files.</param>
            <param name="merge">The merge style to use for these files.</param>
            <param name="updateHiddenFilesOnly">When set to true, only hidden folder files will be updated (no working files we be touched).</param>
            <param name="ancestorFullPath">Set in most cases for get to non-working folders.  This path should be for the folder that is the common ancestor to all the files to be retrieved.  This path will be converted to the supplied ancestorDiskPath when the files are written to disk.  If null, no translation will be done (everything will be placed inside its full path inside the ancestorDiskPath).</param>
            <param name="flat"></param>
            <param name="ancestorDiskPath">Set to non-null when this get is to non-working folders.  This string describes the disk path to use (instead of any assigned working folder) for the supplied ancestorFullPath.</param>
            <param name="PromptData">Data for providing overwrite prompts</param>
            <param name="isLabelGet">Set to true if the files being downloaded are from a label, false otherwise.</param>
            <param name="currentPathToLabelItem">The current full repository path to the root of the label.  Can be null if isLabelGet is false.</param>
            <param name="labelID">The ID of the label.  Set to 0 if isLabelGet is false.</param>
            <param name="isRetry"></param>
            <param name="isGetByDisplayVersion"></param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ProcessGetShelvedAddRequests(VaultClientOperationsLib.GetFileInfo[])">
            <summary>
            
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CreateGetFileRequests(VaultClientOperationsLib.VaultClientFile[],System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a requests for the given files in either an ObjVerID or Display Version-centric fashion.
            Results are returned as VaultRequestGetFile instances inside GetFileInfo instances.  A new list 
            of files is returned (because this function may decide that only some of the files given to it 
            are out of date and need to be fetched).
            </summary>
            <param name="files">The given VaultClientFile objects to create the requests for.</param>
            <param name="forceLatest">true if the requested ObjVerID should be VaultDefine.Latest, false if it should be taken from the supplied VaultClientFile.</param>
            <param name="forceDisplayVersion">true if the new request object should specify the Display Version, false if the new request object should specify the ObjVerID.</param>
            <param name="dontCheckWorkingFolders">Set to true if this function should not consult any working folder data before building the request (all requests will be for full files, never deltas).</param>
            <param name="makeWritable">The setting for writability of all files that do not need to be downloaded</param>
            <param name="isLabelGet">Set to true if the get is for files in a label.  This changes the way the paths in the request items are built.</param>
            <param name="labelSubItemPath">If isLabelGet is true, the label-root-relative path to the subitem that is the root of the labelStructure.  If isLabelGet is false, pass null.</param>
            <param name="isLabelGetForSingleFile">Set to true when the get is for a single file (we know the file's parent is bogus, so we won't get its full path).</param>
            <returns>A new array of GetFileInfo instances.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CreateGetFileRequests(VaultClientOperationsLib.VaultClientFolder[],System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a requests for the given files in either an ObjVerID or Display Version-centric fashion.
            Results are returned as VaultRequestGetFile instances inside GetFileInfo instances.  A new list 
            of files is returned (because this function may decide that only some of the files given to it 
            are out of date and need to be fetched).
            </summary>
            <param name="folders">The given VaultClientFolder objects to create the requests for.</param>
            <param name="forceLatest">true if the requested ObjVerID should be VaultDefine.Latest, false if it should be taken from the supplied VaultClientFile.</param>
            <param name="forceDisplayVersion">true if the new request object should specify the Display Version, false if the new request object should specify the ObjVerID.</param>
            <param name="dontCheckWorkingFolders">Set to true if this function should not consult any working folder data before building the request (all requests will be for full files, never deltas).</param>
            <param name="makeWritable">The setting for writability of all files that do not need to be downloaded</param>
            <param name="isLabelGet">Set to true if the get is for files in a label.  This changes the way the paths in the request items are built.</param>
            <param name="labelSubItemPath">If isLabelGet is true, the label-root-relative path to the subitem that is the root of the labelStructure.  If isLabelGet is false, pass null.</param>
            <param name="isLabelGetForSingleFile">Set to true when the get is for a single file (we know the file's parent is bogus, so we won't get its full path).</param>
            <returns>A new array of GetFileInfo instances.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CreateGetFileRequests(VaultClientOperationsLib.VaultClientFolder[],System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a requests for the given files in either an ObjVerID or Display Version-centric fashion.
            Results are returned as VaultRequestGetFile instances inside GetFileInfo instances.  A new list 
            of files is returned (because this function may decide that only some of the files given to it 
            are out of date and need to be fetched).
            </summary>
            <param name="folders">The given VaultClientFolder objects to create the requests for.</param>
            <param name="forceLatest">true if the requested ObjVerID should be VaultDefine.Latest, false if it should be taken from the supplied VaultClientFile.</param>
            <param name="forceDisplayVersion">true if the new request object should specify the Display Version, false if the new request object should specify the ObjVerID.</param>
            <param name="dontCheckWorkingFolders">Set to true if this function should not consult any working folder data before building the request (all requests will be for full files, never deltas).</param>
            <param name="makeWritable">The setting for writability of all files that do not need to be downloaded</param>
            <param name="isLabelGet">Set to true if the get is for files in a label.  This changes the way the paths in the request items are built.</param>
            <param name="labelSubItemPath">If isLabelGet is true, the label-root-relative path to the subitem that is the root of the labelStructure.  If isLabelGet is false, pass null.</param>
            <param name="isLabelGetForSingleFile">Set to true when the get is for a single file (we know the file's parent is bogus, so we won't get its full path).</param>
            <param name="bIsRetry"></param>
            <returns>A new array of GetFileInfo instances.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.CreateGetFileRequests(VaultClientOperationsLib.VaultClientFile[],System.Boolean,System.Boolean,System.Boolean,VaultClientOperationsLib.MakeWritableType,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a requests for the given files in either an ObjVerID or Display Version-centric fashion.
            Results are returned as VaultRequestGetFile instances inside GetFileInfo instances.  A new list 
            of files is returned (because this function may decide that only some of the files given to it 
            are out of date and need to be fetched).
            </summary>
            <param name="files">The given VaultClientFile objects to create the requests for.</param>
            <param name="forceLatest">true if the requested ObjVerID should be VaultDefine.Latest, false if it should be taken from the supplied VaultClientFile.</param>
            <param name="forceDisplayVersion">true if the new request object should specify the Display Version, false if the new request object should specify the ObjVerID.</param>
            <param name="dontCheckWorkingFolders">Set to true if this function should not consult any working folder data before building the request (all requests will be for full files, never deltas).</param>
            <param name="makeWritable">The setting for writability of all files that do not need to be downloaded</param>
            <param name="isLabelGet">Set to true if the get is for files in a label.  This changes the way the paths in the request items are built.</param>
            <param name="labelSubItemPath">If isLabelGet is true, the label-root-relative path to the subitem that is the root of the labelStructure.  If isLabelGet is false, pass null.</param>
            <param name="isLabelGetForSingleFile">Set to true when the get is for a single file (we know the file's parent is bogus, so we won't get its full path).</param>
            <param name="bIsRetry"></param>
            <returns>A new array of GetFileInfo instances.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ResolveUnknownFiles(VaultClientOperationsLib.UnknownFile[])">
            <summary>
            
            </summary>
            <param name="unknownFiles"></param>
            <returns>An array containing all of the VaultClientFiles that will need to be retried.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetRepositoryAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.AddLabel(System.String,System.Int64,System.String,System.String,VaultLib.VaultLabelResult@)">
            <summary>
            Add a textual label to a particular version of a file.
            </summary>
            <param name="repositoryPath">The repository path of the file or folder to label.</param>
            <param name="objVerID">The object version ID of the file or folder to label (repositoryPath).</param>
            <param name="label">The label string.</param>
            <param name="comment">Optional label comment.</param>
            <param name="result">A reference into which the result from the server will be placed for this item.</param>
            <returns>The status code returned by the server.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.DeleteLabel(System.String,System.Int64)">
            <summary>
            Deletes a textual label.
            </summary>
            <param name="currentPathToLabelItem">The full path in the current repository to an item in the label (for authorization checking by the server).</param>
            <param name="labelID">The ID of the label to delete.</param>
            <returns>The status code returned by the server.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetLabelStructureByID(System.Int64,System.String,System.String,System.String[]@,System.String[]@,VaultLib.VaultDateTime@,VaultLib.VaultRepositoryDelta@,VaultLib.VaultFileDelta@,System.Int64@)">
            <summary>
            See VaultConnection.GetLabelStructureByName for important usage information.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GetLabelStructureByName(System.String,System.Int64@,System.String,System.String,System.String[]@,System.String[]@,VaultLib.VaultDateTime@,VaultLib.VaultRepositoryDelta@,VaultLib.VaultFileDelta@,System.Int64@)">
            <summary>
            See VaultConnection.GetLabelStructureByName for important usage information.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutExclusiveByAnyone(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out exclusively by someone
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is exclusively checked out by someone</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutExclusiveByAnyoneButMe(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if someone other than the current user has the file checked out exclusively.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutByAnyone(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out by anyone
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutByMeOnAnyMachine(VaultClientOperationsLib.VaultClientFile,System.Boolean)">
            <summary>
            Checks to see if a file is checked out by the current user
            </summary>
            <param name="file">The file to check</param>
            <param name="bFileItemPathOnly">Checks the File's ID, user's login and the repository Path</param>
            <returns>True if the file is checked out by the current user</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutByMeOnThisMachine(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out by the current user on the current machine
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out by the current user on the current machine</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.IsCheckedOutBySpecificUser(VaultClientOperationsLib.VaultClientFile,System.String,System.String@)">
            <summary>
            Checks to see if a file is checked out by a specific user
            </summary>
            <param name="file">The file to check</param>
            <param name="username">The username to check</param>
            <param name="comment">Returns the check out comment if the file is checked out by this user</param>
            <returns>True if the file is checked out by the specific user</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Blame_TranslateFromWorkingFile(VaultClientOperationsLib.VaultClientFile,System.Int32,System.Int32)">
            <summary>
            <para>First step in determining blame from a working file.
            Note this method only determines whether the user is to blame;
            if not, the caller will need to query the server to find an older
            change.  Returned object contains these fields:
            </para>
            <list>
              <item>.differ is true if the files differ in the given range,
                    i.e. user is to blame for the change.</item>
              <item>.left* fields describe the lines from working file,
                    i.e. a copy of startLine and countLines.</item>
              <item>.right* fields describe the lines from the baseline,
                    i.e. the lines in baseline corresponding to the given
                    lines from the working file.</item>
            </list>
            <para>If .differ is true, user is to blame for the changes.
            If false, caller must call ClientInstance.Connection.BlameRegion
            with the line numbers from .right* to determine who made the change.</para>
            
            <para>Both files must already exist on disk.
            Throws the usual file exceptions if there are any problems
            accessing the files.</para>
            </summary>
            
            <param name="vcf">Vault file to examine.</param>
            <param name="startLine">First line of interest in the working file.</param>
            <param name="countLines">Number of iteresting lines, including startLine.</param>
            <returns>TranslateLinesResponse describing change.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.AddItem(MantisLib.MantisItem@)">
            <summary>
            Add a Dragent Item 
            </summary>
            <param name="item">The item to be added.  Note that for attachments, the only params that need to be 
            filled out for each addded MantisItemAttachment are the LocalPath, msgid and optinoally description</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateBugTracking(VaultClientOperationsLib.UpdateBugURLCommand)">
            <summary>
            Update the bug tracking system 
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UpdateWorkItems(System.Int64,VaultClientOperationsLib.ChangeSetItemColl,VaultClientOperationsLib.IntegrationComponents.WorkItemModifications)">
            <summary>
            method wo update work item changes.
            </summary>
            <param name="nTxID"></param>
            <param name="csic"></param>
            <param name="wim"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.Shelve(System.String,VaultClientOperationsLib.ChangeSetItemColl,System.String,System.Int32[],VaultClientOperationsLib.ShelvesetItemIDEInfo[],System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="csic"></param>
            <param name="comment"></param>
            <param name="bugIDs"></param>
            <param name="ideInfos"></param>
            <param name="undochanges"></param>
            <param name="replace"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.DeserializeShelvesetContents(VaultLib.ShelvesetDetails)">
            <summary>
            
            </summary>
            <param name="ssd"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.DeserializeShelvesetItemContents(VaultLib.ShelvesetItem)">
            <summary>
            
            </summary>
            <param name="si"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ZipDirectory(System.String)">
            <summary>
            Zip a directory, including all subdirectories (empty or not) and files.
            </summary>
            <param name="diskPath">Disk path to the directory to be zipped</param>
            <returns>Disk path to the newly created zip file</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.GenerateFileList(System.String)">
            <summary>
            Helper method for ZipDirectory method.
            </summary>
            <param name="Dir"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.UnzipFile(System.String,System.IO.Stream)">
            <summary>
            Unzip a zip file to a directory on disk.
            </summary>
            <param name="diskPath">Destination directory, will be created if it does not already exist</param>
            <param name="zipFile">A Zip file to unzip</param>
        </member>
        <member name="M:VaultClientOperationsLib.ClientInstance.ClientInstance_Shutdown">
            <summary>
            Method used as an event when client instance is shut down.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.ImportSourceFile">
            <summary>
            Sets or gets the name of the file to use as the importer's source file for doing diffs before upload.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.Progress">
            <summary>
            Gets the progress as an integer (1-100).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.ActiveRepositoryID">
            <summary>
            Gets the active repository ID used by ClientInstance.  -1 means none.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.NativeEOL">
            <summary>
            Get the native EOL type for the OS this client is running on
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.Repository">
            <summary>
            Gets the Repository object for the current repository.  May be null.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.TreeCache">
            <summary>
            Gets the TreeCache used by ClientInstance.  May be null.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.ConnectionStateType">
            <summary>
            Gets the connection state type.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.Connection">
            <summary>
            Gets the Connection used by ClientInstance.  May be null.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.AccessLevel">
            <summary>
            Gets the connection access level
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.WorkingFolderOptions">
            <summary>
            Gets and sets working folder options
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.CertificatePolicy">
            <summary>
            Gets the Certificate Policy used by ClientInstance and the connection.  May be null.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.HasActiveRepository">
            <summary>
            True if there is an active repository ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.LocalStoreBasePath">
            <summary>
            The full path of the local disk folder where cached information is stored.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ClientInstance.AutoChangeScanEnabled">
            <summary>
            Gets and sets whether auto change scanning is enabled
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.CheckOutItemSorter">
            <summary>
            Implements IComparer so we can sort check out items when they come back
            from the server.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClient_CheckOutItem_UserItem">
            <summary>
            This class holds all the data a VaultCheckOutItem and VaultCheckOutUser would
            hold, but without the parentage.  It's only used temporarily when refreshing
            the check out collection to sort things.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.GetFileInfo">
            <summary>
            Represents a file that needs to be fetched for a Get operation.  File must always
            be supplied, but request may be null (to signify that the file doesn't need to be
            requested for download from the server).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultGetResponse">
            <summary>
            Contains a VaultClientFile object and its related VaultResponseGetFile result object.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultGetResponse.#ctor(VaultClientOperationsLib.VaultClientFile,VaultLib.VaultResponseGetFile)">
            <summary>
            ctor
            </summary>
            <param name="file"></param>
            <param name="response"></param>
        </member>
        <member name="P:VaultClientOperationsLib.VaultGetResponse.File">
            <summary>
            Gets the VaultClientFile for this response.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultGetResponse.Response">
            <summary>
            Gets the VaultResponseGetFile for this response.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.OperationsMisc">
            <summary>
            Miscellaneous functions useful to operations lib and above libraries.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.SaveToCharBufferWithOverflow(System.Text.Encoding,System.IO.Stream,System.Char,System.Char[]@,System.Int32@)">
            <summary>
            Method will update a character buffer (eol / keyword exp)
            if there is an overflow, it is written out to the stream.
            </summary>
            <param name="encoder"></param>
            <param name="sOut"></param>
            <param name="ch"></param>
            <param name="chars"></param>
            <param name="currBufferPos"></param>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.WriteStringToStream(System.Text.Encoding,System.IO.Stream,System.String)">
            <summary>
            Write the string to the output stream using the encoder.
            </summary>
            <param name="encoder"></param>
            <param name="sOut"></param>
            <param name="str"></param>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.WriteCharBufferToStreamAndReset(System.Text.Encoding,System.IO.Stream,System.Char[],System.String,System.Int32@)">
            <summary>
            Write the character buffer to the out put stream.  Also put EOL in stream if param is not null
            </summary>
            <param name="encoder"></param>
            <param name="sOut"></param>
            <param name="chars"></param>
            <param name="eolString"></param>
            <param name="currBufferLen"></param>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.WriteCharBufferToStreamAndReset(System.Text.Encoding,System.IO.Stream,System.Char[],System.Int32@)">
            <summary>
            Write buffer to stream w/ out EOL
            </summary>
            <param name="encoder"></param>
            <param name="sOut"></param>
            <param name="chars"></param>
            <param name="currBufferLen"></param>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.ChangeEOL(System.String,System.String,System.Int32)">
            <summary>
            Translates EOL characters in a file, creating a temp file
            Note, this is method is indifferent to the current EOL 
            of the file.  It will detect \r, \r\n, and \n as all
            valid EOL endings.
            </summary>
            <param name="fileNameIn">The file to translate</param>
            <param name="fileNameOut">The temp file holding the translated text</param>
            <param name="EOLout">The EOL character(s) to translate to</param>
        </member>
        <member name="M:VaultClientOperationsLib.OperationsMisc.TransformFile(VaultClientOperationsLib.ClientInstance,VaultClientOperationsLib.ChangeSetItem,System.Boolean,System.String,System.String@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a file's EOL characters and optionally expands its keywords.  
            Note, this is method is indifferent to the current EOL 
            of the file.  It will detect \r, \r\n, and \n as all
            valid EOL endings.
            </summary>
            <param name="ci">A ClientInstance to use for keyword expansion</param>
            <param name="csi">The original ChangeSetItem for this change</param>
            <param name="doCheckforEOL">Flag used to tell TransformFile to use the Environment / EOL settings to determine if EOL conversion should be done.</param>
            <param name="fileNameIn">The file to transform</param>
            <param name="fileNameOut">If the file is modified, this is the temp file path containing the modified file</param>
            <param name="EOLin">EOL format of the current file</param>
            <param name="EOLout">EOL format to convert to</param>
            <param name="ExpandKeywords">Attempt to expand the file's keywords as well.</param>
            <returns>true if any keywords were expanded</returns>
        </member>
        <member name="T:VaultClientOperationsLib.KeywordExpander">
            <summary>
            Provides a class to expand keywords
            </summary>
            $NoKeywords: $
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Archive">
            <summary>
            Archive expands to the full repository path of the file
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Author">
            <summary>
            Author expands to the current user's ID
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Date">
            <summary>
            Date exapnds to the date set on the change set item
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Header">
            <summary>
            Header combines Archive, Revision, Date, and Author
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.History">
            <summary>
            History expands to the Workfile and extra info gets set to the current comment, revision, etc.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.JustDate">
            <summary>
            JustDate expands to a short date format (minus the time)
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Log">
            <summary>
            Log expands to Archive plus a RCS formatted version of history info
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Logfile">
            <summary>
            LogFile expands to the full repository path of the file
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Modtime">
            <summary>
            Modtime expands to file modification time
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Revision">
            <summary>
            Revision expands to the current file version number
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.Workfile">
            <summary>
            Workfile expands to the file name/extension
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.UTCDate">
            <summary>
            UTCDate expands to the date set on the change set item in UTC
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.UTCModtime">
            <summary>
            UTCModtime returns file modification time in UTC
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.NoKeywords">
            <summary>
            NoKeywords stops further keyword expansion in this file
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KeywordExpander.MaxLength">
            <summary>
            The maximum length of a keyword
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.KeywordExpander.Expand(System.String,VaultClientOperationsLib.ClientInstance,VaultClientOperationsLib.ChangeSetItem,System.String@,System.Collections.ArrayList@)">
            <summary>
            Expand a keyword
            </summary>
            <param name="kw">The keyword to expand</param>
            <param name="ci">A Vault ClientInstance to get TreeCache info from</param>
            <param name="csi">The changeSetItem this keyword was taken from</param>
            <param name="expand">Contains the text to add for the expansion (if any)</param>
            <param name="extra">Contains extra text to be inserted after the expansion (i.e. the History keyword)</param>
            <returns>returns True if we should continue expanding keywords, False if NoKeywords was found</returns>
        </member>
        <member name="M:VaultClientOperationsLib.KeywordExpander.IsKeyword(System.String)">
            <summary>
            Checks to see if a string is a keyword.
            </summary>
            <param name="kw">The string to check for keywordiness</param>
            <returns>True if the string corresponds to a keyword, false otherwise</returns>
        </member>
        <member name="T:VaultClientOperationsLib.CheckOutFailedException">
            <summary>
            Exception class for checkout failures
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.CheckOutFailedException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">the message to assign to this exception</param>
        </member>
        <member name="M:VaultClientOperationsLib.CheckOutFailedException.#ctor">
            <summary>
            ctor for creating an empty exception
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.GetLatestVersionFailedException">
            <summary>
            Exception class for get latest failures
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UploadFailedPermanentException">
            <summary>
            Exception class for permanent upload failures
            These are thrown in UploadItem when the problem that happened
            is permanent and the upload should not be retried (because it
            will fail again).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UploadFailedPermanentException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">the message to assign to this exception</param>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderConflictException">
            <summary>
            Exception type thrown when an attempt is made to assign a
            repository path to a working folder that is already the
            working folder of a different repository path.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderConflictException.ConflictList">
            <summary>
            An ArrayList of strings indicating the repository paths
            that were already assigned to the working folder that you
            were attempting to assign another path to.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderConflictException.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor.
            </summary>
            <param name="conflicts">An ArrayList of strings indicating
            the repository paths that were already assigned to the
            working folder that you were attempting to assign another
            path to.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderConflictException.ConstructMessage(System.Collections.ArrayList)">
            <summary>
            Helper function for WorkingFolderConflictException constructor.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItemType">
            <summary>
            enum for the type of change set item
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Modified">
            <summary>
            Modified
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Unmodified">
            <summary>
            Unmodified
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.CreateFolder">
            <summary>
            CreateFolder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.AddFile">
            <summary>
            AddFile
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.DeleteFile">
            <summary>
            DeleteFile
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.AddFolder">
            <summary>
            AddFolder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.AddPartialFolder">
            <summary>
            AddPartialFolder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.DeleteFolder">
            <summary>
            DeleteFolder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.BranchCopy">
            <summary>
            Copy Branch
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Share">
            <summary>
            Share
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Move">
            <summary>
            Move
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Rename">
            <summary>
            Rename
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Pin">
            <summary>
            Pin
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Unpin">
            <summary>
            Unpin
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Undelete">
            <summary>
            Undelete
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.ChangeFileProperties">
            <summary>
            ChangeFileProperties
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Rollback">
            <summary>
            Rollback
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.ChangeExtProperties">
            <summary>
            ChangeExtProperties
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.CheckedOutMissing">
            <summary>
            Checked out but missing.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Snapshot">
            <summary>
            Like old-labels, create a heavy-weight snapshot of historic folders.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.BranchShare">
            <summary>
            Share Branch
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItemType.Obliterate">
            <summary>
            Obliterate
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem">
            <summary>
            ChangeSetItem defines a transacted modification to the repository.  These objects are created 
            as a result of user actions on repository files (adds, deletes, etc.).  This class
            is abstract; instantiate one of the specialized derived classes.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItem._request">
            <summary>
            The request associated with this change set item
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.ChangeSetItem._crcEngine">
            <summary>
            The CRC engine to use for this change set item
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.#ctor(VaultClientOperationsLib.ChangeSetItemType,VaultLib.VaultDateTime,System.String,System.String)">
            <summary>
            Base constructor
            </summary>
            <param name="type"></param>
            <param name="time">TODO</param>
            <param name="comment">A change set item comment, supplied by the user. ["Fixed bug:342"]</param>
            <param name="properties">A free-form text string describing any additional information that the user should see when presented with this change set item. ["2 files, 24KB"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.Clone">
            <summary>
            Create a duplicate of this item
            </summary>
            <returns>A clone of this item</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.Equals(System.Object)">
            <summary>
            Compares two change set items for equality.
            </summary>
            <param name="obj">The item to compare against.</param>
            <returns>true if the items represent the same change.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.CompareTo(System.Object)">
            <summary>
            Implemented so we can Sort() these items by date.
            </summary>
            <param name="o">The object with which to compare this object.</param>
            <returns>The comparison results.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Base classes must implement this function to create a proper VaultRequestItem
            object (or objects) from their data and place that object in _request.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.GetServerSynchedRepositoryPath(VaultClientOperationsLib.ClientInstance,System.String)">
            <summary>
            Get the server-synched path for an item that exists in the repository.
            </summary>
            <param name="ci"></param>
            <param name="clientPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.GetServerSynchedRepositoryPathForNewItem(VaultClientOperationsLib.ClientInstance,System.String)">
            <summary>
            Get the server-synched path for an item that doesn't yet actually exist in the repository.
            </summary>
            <param name="ci"></param>
            <param name="clientPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.SetRequest(VaultLib.VaultRequestItem)">
            <summary>
            Sets the VaultRequestItem to use.
            </summary>
            <param name="request">A VaultRequestItem to use for this change set item</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.WriteVersion1(System.IO.BinaryWriter)">
            <summary>
            Saves a change set item to a file in Version 1 format, so we can serialize this structure ourself.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.ReadVersion1(System.IO.BinaryReader)">
            <summary>
            Reads a change set from a file using version 1 format, using our own deserialization
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.WriteVersion2(System.IO.BinaryWriter)">
            <summary>
            Write Version 2 will store Local time values as UTC.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.WriteVersion3(System.IO.BinaryWriter)">
            <summary>
            Version 3 includes state data on whether the working folder has been updated to reflects a pending change.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.WriteVersion4(System.IO.BinaryWriter)">
            <summary>
            Version 4 makes corrections to things added in version 3.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.ReadVersion2(System.IO.BinaryReader)">
            <summary>
            Read times as UTC from the reader, and convert back to Local time.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.ReadVersion3(System.IO.BinaryReader)">
            <summary>
            Version 3 includes state data on whether the working folder has been updated to reflects a pending change.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.ReadVersion4(System.IO.BinaryReader)">
            <summary>
            Version 4 makes corrections to things added in version 3.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.GetObjID(VaultClientOperationsLib.VaultClientRepository)">
            <summary>
            Returns the ObjID when relevant, long.MinValue when not.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.DisplayName">
            <summary>
            Displayable version of the item's name
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.DisplayRepositoryPath">
            <summary>
            Displayable version of the item's repository path
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.Type">
            <summary>
            The type of change set item this is
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.Time">
            <summary>
            The time this item was added, modified, etc.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.Comment">
            <summary>
            A comment for this change set item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.Properties">
            <summary>
            Properties for this change set item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.TypeString">
            <summary>
            Gets a string description of this change set item type.  Derived classes
            must implement this.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem.Request">
            <summary>
            Gets the VaultRequestItem associated with this chaneg set item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem.RepositoryDeltaComparer">
            <summary>
            Used for sorting changesets into an order friendly for applying client-side deltas.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem.ServerComparer">
            <summary>
            Sorts changeset items such that the server will handle them correctly on commit.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem.ServerComparer.Compare(System.Object,System.Object)">
            <summary>
            Perform a dependency comparison of the provided ChangeSetItems.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
                Less than zero if y may depend on x (x should come first).
                Zero if the items have no dependency relationship.
                Greater than zero if x may depend on y (y should come first).
            </returns>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItemPerformPending">
            <summary>
            Change set types that should be performed in the working folder when pended, e.g. Move, Rename, Delete, should inherit from this class.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemPerformPending.CheckForRepositoryNamespaceIssues(VaultClientOperationsLib.TreeCache,System.Boolean)">
            <summary>
            Determine if a move or rename cannot be performed because there is a file/folder name conflict in the repository.
            </summary>
            <param name="treeCache"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItemPerformPending.AffectedTreeObject">
            <summary>
            The treeobject whose namespace is being directly changed.  Available only after GetDelta()
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemNamespaceChange.CheckForRepositoryNamespaceIssues(VaultClientOperationsLib.TreeCache,System.Boolean)">
            <summary>
            Determine if a move or rename cannot be performed because:
              - there is a file/folder name conflict in the repository
              - the destination path doesn't exist
              - the source path doesn't exist
              - the object at the source path has a different ID now than when the change was pended
            </summary>
            <param name="treeCache"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemNamespaceChange.Equals(System.Object)">
            <summary>
            Compares two change set items for equality.
            </summary>
            <param name="obj">The item to compare against.</param>
            <returns>true if the items represent the same change.</returns>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItemNamespaceChange.ObjectID">
            <summary>
            Gets the object ID to move
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_AddFile">
            <summary>
            Add a file to the repository.				
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFile.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="diskFile">The local disk path name to the file to be added. ["C:\file.cs"]</param>
            <param name="repositoryPath">The full repository path of the file to be added. ["$/some/folder/file.cs"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFile.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFile.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Creates the VaultRequestAddFile to use for this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFile.DiskFile">
            <summary>
            Gets the full path to the file on disk
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFile.RepositoryPath">
            <summary>
            Gets the full repository path to the item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFile.UploadTempFile">
            <summary>
            Gets or Sets the temp file to use for uploading
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFile.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFile.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFile_Import.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Creates the VaultRequestAddFile to use for this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_CreateFolder">
            <summary>
            Create a folder in the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CreateFolder.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath">The full repository path of the folder to be added. ["$/projects"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CreateFolder.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultRequestItem for this change set item
            </summary>
            <param name="ci">a copy of ClientInstance to use in creating the request (not used in this particular instance)</param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CreateFolder.RepositoryPath">
            <summary>
            Gets the Repository path associated with this csi
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CreateFolder.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CreateFolder.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_AddFolder">
            <summary>
            Add a folder and all its contents to the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFolder.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="diskFolder">The local disk path name to the folder to be added. ["C:\projects"]</param>
            <param name="repositoryPath">The full repository path of the folder to be added. ["$/somewhere/projects"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddFolder.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultClientRequest for this csi. Note: this function is not used for AddFolder
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFolder.DiskFolder">
            <summary>
            Gets the disk folder path
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFolder.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFolder.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddFolder.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.PartialFolderItem">
            <summary>
            A class that stores info about a single folder or file that could
            be included in a partial folder add.  This is what is stored as
            the value in each SortedList item within the ChangeSetItem_AddPartialFolder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.WriteVersion1(System.IO.BinaryWriter)">
            <summary>
            Saves a partial folder item to a file in Version 1 format, so we can serialize this structure ourself.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.ReadVersion1(System.IO.BinaryReader)">
            <summary>
            Reads a partial folder item from a file using version 1 format, using our own deserialization
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.WriteVersion2(System.IO.BinaryWriter)">
            <summary>
            write the data in version 2 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.ReadVersion2(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 2 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.WriteVersion3(System.IO.BinaryWriter)">
            <summary>
            write the data in version 2 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.ReadVersion3(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 2 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.WriteVersion4(System.IO.BinaryWriter)">
            <summary>
            write the data in version 2 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.PartialFolderItem.ReadVersion4(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 2 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder">
            <summary>
            Add a folder and some of its contents to the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="diskFolder">The local disk path name to the folder to be added. ["C:\projects"]</param>
            <param name="repositoryPath">The full repository path of the folder to be added. ["$/somewhere/projects"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultClientRequest for this csi. Note: this function is not used for AddFolder
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.WriteVersion1(System.IO.BinaryWriter)">
            <summary>
            Saves this change set item to a file in Version 1 format, so we can serialize this structure ourself.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.ReadVersion1(System.IO.BinaryReader)">
            <summary>
            Reads a change set item from a file using version 1 format, using our own deserialization
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.WriteVersion2(System.IO.BinaryWriter)">
            <summary>
            write the data in version 2 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.ReadVersion2(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 2 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.WriteVersion3(System.IO.BinaryWriter)">
            <summary>
            write the data in version 3 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.ReadVersion3(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 3 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.WriteVersion4(System.IO.BinaryWriter)">
            <summary>
            write the data in version 4 format.
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.ReadVersion4(System.IO.BinaryReader)">
            <summary>
            Read the data in Version 4 format.
            </summary>
            <param name="br"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.DiskFolder">
            <summary>
            Gets the disk folder path
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.InclusionList">
            <summary>
            Gets the list of files and folders to add as part of the folder add
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_AddPartialFolder.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_DeleteFile">
            <summary>
            Delete a file from the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFile.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the file to be deleted.</param>
            <param name="repositoryPath">The full repository path of the file to be deleted.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFile.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultRequestDelete item to be used by this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFile.Equals(System.Object)">
            <summary>
            Compares two change set items for equality.
            </summary>
            <param name="obj">The item to compare against.</param>
            <returns>true if the items represent the same change.</returns>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFile.FileID">
            <summary>
            Gets the file ID of the item to be deleted
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFile.RepositoryPath">
            <summary>
            Gets the repository path of this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFile.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFile.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_DeleteFolder">
            <summary>
            Delete a folder from the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the folder to be deleted.</param>
            <param name="repositoryPath">The full repository path of the folder to be deleted. ["$/foo/bar"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultRequestDelete item to use with this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.DoWorkingFolderDelete(VaultClientOperationsLib.TreeCache,System.String,System.String)">
            <summary>
            Actually does a rename, so we can undo/redo.
            </summary>
            <param name="cache"></param>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.Equals(System.Object)">
            <summary>
            Compares two change set items for equality.
            </summary>
            <param name="obj">The item to compare against.</param>
            <returns>true if the items represent the same change.</returns>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.FolderID">
            <summary>
            Gets the folder ID of the folder to be deleted
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.RepositoryPath">
            <summary>
            Gets the repository path of the folder to be deleted
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_DeleteFolder.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Undelete">
            <summary>
            Undelete an object (file or folder) from the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Undelete.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the object to be undeleted.</param>
            <param name="repositoryPath">The full repository path of the object to be undeleted. ["$/folder"]</param>
            <param name="deletionID">The deletion ID of the object to be undeleted.  Use ListDeletedItems to determine the DeletionID, or use 0 if there has only been one object with this item's name and ID in the folder.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Undelete.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultRequestUndelete item to use with this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Undelete.ObjID">
            <summary>
            Gets the object ID of the item to undelete
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Undelete.RepositoryPath">
            <summary>
            Gets the repository path of the object to undelete
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Undelete.DeletionID">
            <summary>
            (optional) Gets the deletion ID of the item to undelete (use ListDeletedItems to determine the DeletionID)
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Undelete.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Undelete.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties">
            <summary>
            Set the merge and/or end of line options for a file.				
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="verID">The object version ID of the file to be changed</param>
            <param name="repositoryPath">The full repository path of the file to be changed</param>
            <param name="mergeable">-1 for use default, 0 for binary, 1 for mergeable</param>
            <param name="eol">end of line terminator (TODO)</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestChangeProperty item to use with this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.ObjVerID">
            <summary>
            Gets the object version ID of the object to change properties on
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.RepositoryPath">
            <summary>
            Gets the repository path of the object to change properties on
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.Mergeable">
            <summary>
            Gets the mergeable status of this csi
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.EOL">
            <summary>
            Gets the EOL setting for this csi
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeFileProperties.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties">
            <summary>
            Set the extended properties for an object
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,VaultLib.VaultNameValueCollection)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryitempath">The full repository path of the object to be changed</param>
            <param name="namevaluepairs">A VaultNameValueCollection of namevalue pairs</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestChangeExtProperty item to use for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties.RepositoryItemPath">
            <summary>
            Gets the repository path for the item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ChangeExtProperties.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_CopyBranch">
            <summary>
            Branch a folder from the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CopyBranch.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath">The full repository path of the folder to be branched. ["$/myfolder"]</param>
            <param name="branchPath">The full repository path of the new branch. ["$/branches/myfolder_branch"]</param>
            <param name="objVerID">The object version ID of the folder to be branched.</param>
            <param name="branchWithOrigModTime"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CopyBranch.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            Vault 3.5.1 and previous ctor
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath"></param>
            <param name="branchPath"></param>
            <param name="objVerID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CopyBranch.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestCopyBranch item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.objVerID">
            <summary>
            Gets the version ID of the item to copy branch
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.BranchPath">
            <summary>
            Gets the branch path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.BranchWithOrigModTime">
            <summary>
            Gets the setting using current timestamp for mod time.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CopyBranch.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_ShareBranch">
            <summary>
            Branch a folder from the repository.  TODO explain difference between CopyBranch and ShareBranch.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ShareBranch.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath">The full repository path of the folder to be branched. ["$/myfolder"]</param>
            <param name="branchPath">The full repository path of the new branch. ["$/branches/myfolder_branch"]</param>
            <param name="objVerID">The object version ID of the folder to be branched.</param>
            <param name="branchWithOrigModTime"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ShareBranch.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            Vault 3.5.1 and previous ctor
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath"></param>
            <param name="branchPath"></param>
            <param name="objVerID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_ShareBranch.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestShareBranch item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.objVerID">
            <summary>
            Gets the version ID of the item to share branch
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.BranchPath">
            <summary>
            Gets the branch path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.BranchWithOrigModTime">
            <summary>
            Gets the setting using current timestamp for mod time.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_ShareBranch.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Rename">
            <summary>
            Rename a file or folder in the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Rename.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            Rename a file or folder.
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the item to be renamed</param>
            <param name="oldRepositoryPath">The full repository path of the item to be renamed ["$/foo/bar/hello.cs"]</param>
            <param name="newName">The new name ["goodbye.cs"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Rename.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestRename item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rename.OldRepositoryPath">
            <summary>
            Gets the repository path of the item to rename
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rename.NewName">
            <summary>
            Gets the new name for the item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rename.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rename.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Rollback">
            <summary>
            Rollback to a version of an object.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Rollback.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="ObjVerID">The Object Version ID to rollback to.</param>
            <param name="repositoryPath">The full repository path of the object. ["$/file.cs"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Rollback.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestRollback item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rollback.ObjVerID">
            <summary>
            Gets the object version ID to roll back to
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rollback.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rollback.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Rollback.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Move">
            <summary>
            Move a file or folder in the repository.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Move.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the file or folder to be moved.</param>
            <param name="oldRepositoryPath">The full repository path of the file or folder to be moved. ["$/hello/foo.cs"]</param>
            <param name="newOwnerPath">The full repository path of the folder into which the item is to be moved.  This folder must already exist, and no object with the same name as the moving object can exist therein already. ["$/destination/folder"]</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Move.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestMove item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Move.GetPartialDelta(VaultClientOperationsLib.VaultClientRepository,VaultClientOperationsLib.VaultClientRepository)">
            <summary>
            Used when undoing a folder delete.  A partial delta is used to redo either the first half (the remove portion) 
            or the second half (the add portion) of a move whose source XOR dest was inside the deleted folder.
            </summary>
            <param name="pendingChangeRepository"></param>
            <param name="serverSynchedRepository"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Move.GetRenameSafeSourceReposPath(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Return the true source path for a move, even if a rename of the same object is pending.
            "True source path" means it has the original name, as though no rename were pending.
            Only works if the ChangeSetItem has been applied to the pending change repository.
            </summary>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Move.GetRenameSafeDestReposPath(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Return the true destination path for a move, even if a rename of the same object is pending.
            "True destination path" means it has the original name, as though no rename were pending.
            Only works if the ChangeSetItem has been applied to the pending change repository.
            </summary>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Move.OldRepositoryPath">
            <summary>
            Gets the full repository path of the object to move
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Move.NewOwnerPath">
            <summary>
            Gets the full repository path of the folder to move the item into
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Move.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Move.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Modified">
            <summary>
            Describe a modification made to a file in the repository.  Typically a
            client application does not need to create these items.  They are
            automatically created by the ClientInstance as it scans working
            folders for files which have been modified.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Modified.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.Int64,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the file which has been modified</param>
            <param name="fileObjVerID">TODO</param>
            <param name="diskFile">The local disk path of the file which contains the new contents. TODO this isn't a delta?</param>
            <param name="repositoryPath">The full repository path of the file that has been modified.</param>
            <param name="needsMerge">TODO</param>
            <param name="EOL">TODO</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Modified.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Modified.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Creates the VaultRequestCheckIn used by theis change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.FileID">
            <summary>
            Gets the file ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.FileObjVerID">
            <summary>
            Gets the File Object Version ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.DiskFile">
            <summary>
            Gets the full path to the file on disk
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.RepositoryPath">
            <summary>
            Gets the full repository path of the file
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.UploadTempFile">
            <summary>
            Gets or Sets the full path to a temp file to use for uploading
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.NeedsMerge">
            <summary>
            Gets whether or not this file needs to be merged
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Modified_Import.#ctor(System.Int64,VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.UInt32,System.Int64,System.Int64,System.Int64,System.UInt32,System.IO.Stream,System.String,System.Boolean,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="folderObjVerID"></param>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID"></param>
            <param name="fileVersion"></param>
            <param name="fileObjVerID"></param>
            <param name="baseObjVersion"></param>
            <param name="baseObjVerID"></param>
            <param name="filelength"></param>
            <param name="filecrc"></param>
            <param name="deltalength"></param>
            <param name="deltalengthstreampos"></param>
            <param name="deltastreampos"></param>
            <param name="deltacrc"></param>
            <param name="deltastream"></param>
            <param name="repositoryPath"></param>
            <param name="needsMerge"></param>
            <param name="EOL"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Modified_Import.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Creates the VaultRequestAddFile to use for this change set item
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified_Import.FileID">
            <summary>
            Gets the File ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified_Import.FileObjVerID">
            <summary>
            Gets the File Object Version ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified_Import.Version">
            <summary>
            Gets or Sets the File Version
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified_Import.RepositoryPath">
            <summary>
            Gets the full repository path of the file
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Modified_Import.NeedsMerge">
            <summary>
            Gets whether or not this file needs to be merged
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Unmodified">
            <summary>
            Describe a non-modification made to a file in the repository.  (OK, that doesn't make
            sense--this class is only here so people can see files they have checked out
            but have not edited in the ChangeSetView.)  Typically a client application does not
            create this object -- it is automatically created by ClientInstance for a file
            which has been checked out but not modified.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Unmodified.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the file</param>
            <param name="fileObjVerID"></param>
            <param name="diskFile"></param>
            <param name="repositoryPath">The full repository path of the file</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Unmodified.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestCheckIn item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.FileID">
            <summary>
            Gets the object ID of the file
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.FileObjVerID">
            <summary>
            Gets the object version ID of the file
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.DiskFile">
            <summary>
            Gets the path to the file on disk
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.UploadTempFile">
            <summary>
            Gets or Sets the full path to a temp file to use for uploading
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unmodified.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Share">
            <summary>
            Share a file or folder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Share.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objectID">The object ID of the file or folder to be shared.</param>
            <param name="repositoryPath">The current full repository path of the file or folder to be shared.</param>
            <param name="newSharePath">The full repository path of the folder into which the item is to be shared.  This folder must already exist, and it must not already contain an object of the same name as the item being shared.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Share.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestShare item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Share.ObjectID">
            <summary>
            Gets the object ID of the item to be shared
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Share.RepositoryPath">
            <summary>
            Gets the repository path for the item to be shared
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Share.NewSharePath">
            <summary>
            Gets the path of the folder to share the object into
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Share.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Share.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Pin">
            <summary>
            Pin a file or folder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Pin.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objVerID">The object version ID of the file or folder to be pinned</param>
            <param name="repositoryPath">The full repository path of the item to be pinned.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Pin.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestPin item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Pin.ObjVerID">
            <summary>
            Gets the object version ID of the item to be pinned
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Pin.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Pin.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Pin.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Unpin">
            <summary>
            Unpin a file or folder.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Unpin.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="objVerID">The object version ID of the file or folder to be unpinned.</param>
            <param name="repositoryPath">The full repository path of the file or folder to be unpinned.</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Unpin.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestUnpin item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unpin.ObjVerID">
            <summary>
            Gets the object version ID of the item to be unpinned
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unpin.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unpin.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Unpin.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItemColl">
            <summary>
            A collection class containing change set items
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.Clone">
            <summary>
            Creates a clone of a ChangeSetItemColl
            </summary>
            <returns>the new collection</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.Add(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Add a ChangeSetItem to the collection
            </summary>
            <param name="item">the ChangeSetItem to add</param>
            <returns>the index at which the new item was added</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.AddRange(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Adds a ChangeSetItemColl's contents to this collection
            </summary>
            <param name="items">the ChangeSetItemColl whose contents you wish to add</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.AddRange(VaultClientOperationsLib.ChangeSetItem[])">
            <summary>
            Adds an array of ChangeSetItems to this collection
            </summary>
            <param name="items">the array to add</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.Remove(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Removes a ChangeSetItem from the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.Contains(VaultClientOperationsLib.ChangeSetItem)">
            <summary>
            Checks to see if a ChangeSetItem is in the collection
            </summary>
            <param name="item">the ChangeSetItem to search for</param>
            <returns>True if the item is in the collection</returns>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItemColl.ToString">
            <summary>
            Create a full string from each change set item.
            At this time, each item is separated by newline.
            </summary>
            <returns></returns>
        </member>
        <member name="E:VaultClientOperationsLib.ChangeSetItemColl.Changed">
            <summary>
            An event handler that fires when the contents of the collection change
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItemColl.Item(System.Int32)">
            <summary>
            Allows you to get/set items using array notation
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing">
            <summary>
            Describe an item that is checked out, but does not actually exist on disk.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.#ctor(VaultLib.VaultDateTime,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="objectID">The object ID of the file</param>
            <param name="repositoryPath">The full repository path of the file</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestCheckIn item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.FileID">
            <summary>
            Gets the object ID of the file
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_CheckedOutMissing.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Snapshot">
            <summary>
            Create an "old-style label" (now called Snapshot).
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Snapshot.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath">The full repository path of the folder to be snapshat. ["$/myfolder"]</param>
            <param name="snapshotPath">The full repository path for the destination of the new snapshot. ["$/labels/myfolder_snapshot"]</param>
            <param name="objVerID">The object version ID of the folder to be snapshat.</param>
            <param name="branchWithOrigModTime"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Snapshot.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            Vault 3.5.1 and previous ctor
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath"></param>
            <param name="snapshotPath"></param>
            <param name="objVerID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Snapshot.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create the VaultRequestSnapshot item for this csi
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.ObjVerID">
            <summary>
            Gets the Version ID of the folder to be snapshat
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.RepositoryPath">
            <summary>
            Gets the repository path of the folder to be snapshat
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.SnapshotPath">
            <summary>
            Gets the snapshot destination path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.BranchWithOrigModTime">
            <summary>
            Gets the setting using current timestamp for mod time.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Snapshot.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ChangeSetItem_Obliterate">
            <summary>
            Obliterate an item from the repository
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Obliterate.#ctor(VaultLib.VaultDateTime,System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="time"></param>
            <param name="comment"></param>
            <param name="properties"></param>
            <param name="repositoryPath">the path to the item to obliterate</param>
            <param name="objID">object id of item to obliterate</param>
            <param name="deletionID">deletion id containing the item to be obliterated</param>
        </member>
        <member name="M:VaultClientOperationsLib.ChangeSetItem_Obliterate.CreateRequest(VaultClientOperationsLib.ClientInstance)">
            <summary>
            Create a VaultClientRequest for this csi. Note: this function is not used for AddFolder
            </summary>
            <param name="ci"></param>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Obliterate.RepositoryPath">
            <summary>
            Gets the repository path for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Obliterate.ID">
            <summary>
            Gets the object's ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Obliterate.DeletionID">
            <summary>
            Gets the deletion ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Obliterate.DisplayName">
            <summary>
            Gets the displayable name for this item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.ChangeSetItem_Obliterate.DisplayRepositoryPath">
            <summary>
            Gets the displayable repository path for this item
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileVersionInfo.#ctor(System.Int64)">
            <summary>
            Don't use this constructor.  It exists for backwards compatability during working folder conversions.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileVersionInfo.#ctor(System.Int64,System.Int64,System.UInt32,System.DateTime)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileVersionInfo.HasExtendedInformation">
            <summary>
            When this is true, FileSize, CRC, and TimeManaged will be valid.  If false, do not use
            those values.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileInfo_1">
            <summary>
            This is version 1 (of the SourceGear Vault proprietary format) of the class
            that represents a file in a working folder.  The old Microsoft Serialized
            class can also be found in this file (it is named WorkingFolderFileInfo).
            
            If you're wondering why the old class wasn't renamed (to WorkingFolderFileInfo_Old
            or something), it's because it would break serialization.  So the new class
            had to be renamed.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileInfo_1._managedVersions">
            <summary>
            The array contains instances of WorkingFolderFileVersionInfo structs.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileInfo_1.HasExtendedInformation(System.Int64)">
            <summary>
            Queries a managed working folder file info object for extended information.
            Extended information includes a file's size, CRC, and time it was managed.
            </summary>
            <param name="objVerID">The ObjVerID of the file to find.</param>
            <returns>true if the file has extended information, false if it does not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileInfo_1.GetTimeManaged(System.Int64)">
            <summary>
            Gets the local time the file was managed.
            </summary>
            <param name="objVerID">The ObjVerID of the file to match.</param>
            <returns>A DateTime in the local time zone.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileInfo_1.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a working folder file info object to a stream faster than Microsoft 
            binary serialization.  You probably don't want to call this function directly 
            (it is meant to be used by WorkingFolderState.Write).
            </summary>
            <param name="bw">The binary writer to use.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileInfo_1.Read(System.IO.BinaryReader)">
            <summary>
            Reads a working folder file info object from a stream faster than Microsoft 
            binary serialization.  You probably don't want to call this function directly 
            (it is meant to be used by WorkingFolderState.Read).
            </summary>
            <param name="br">The binary reader to use.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderFileInfo_1.Read(VaultClientOperationsLib.WorkingFolderFileInfo)">
            <summary>
            Reads a working folder file object from an old format WorkingFolderFileInfo
            class instance.  Returns a new class initialized with the values form the old.
            </summary>
            <param name="old"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileInfo">
            <summary>
            WARNING : This class is deprecated.  It is declared only so we can read it for compatability.  Do not modify this class.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UserOptions">
            <summary>
            Provides get/set methods for settings we store on the server for the current user.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UserOptions._optionsKey">
            <summary>
            This key is used to key the options that we set and get for this
            user.  This key should be changed if a Vault client is released
            with incompatable options settings.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UserOptions.SaveOnlyTheseOptions(VaultClientOperationsLib.UserOptionsCollection)">
            <summary>
            Saves only the options supplied as the parameter, and then loads the options
            back into the internal options set.  This function will overwrite any unsaved
            options in the internal set.  If you think you have unsaved options in the
            internal set, call SaveToServer() before calling this function.
            </summary>
            <param name="options">The list of options to save.</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="T:VaultClientOperationsLib.MagicNumbers">
            <summary>
            MagicNumbers contains constants Vault uses to identify file formats.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.MagicNumbers.ByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality.  If either is null or the lengths do
            not match, the arrays are not considered equal.
            </summary>
            <param name="x">The first byte array.</param>
            <param name="y">The second byte array.</param>
            <returns>true if the arrays are non-null, the same lengths, and each index contains the same value in both arrays.  false otherwise.</returns>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.MicrosoftBinarySerializationHeader">
            <summary>
            This is the sequence of bytes that all Microsoft binary serialized files appear
            to start with.  If fewer bytes will do, shorten this pattern.
            </summary>
            
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.SourceGearVaultFileHeader">
            <summary>
            This is the byte sequence that the proprietary file format Vault files start with.
            The file type is in the byte after that.  The version of the file type is the byte
            after that.  File type versioning only matters to the algorithm doing the
            saving and loading for that file type.
            
            Example byte sequence:
            
            hex:    73 67 76 61 75 6C 74 00 01
            ascii:   s  g  v  a  u  l  t  .  .
                    -------------------- -- --
            	             |           |    `--------------------------------.
            	             |           |                                     |
                        vault header    VaultFileType_RepositoryCache        Version 1
            	
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_RepositoryCache">
            <summary>
            This is the type identifier for repository cache files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_WorkingFolderState">
            <summary>
            This is the type identifier for working folder state files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_CheckOutList">
            <summary>
            This is the type identifier for check out list cache files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_LoginProfile">
            <summary>
            This is the type identifier for login profile files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_WorkingFolderAssignments">
            <summary>
            This is the type identifier for working folder assignment files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_SelectionString">
            <summary>
            This is the type identifier for working folder assignment files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_ChangeSetItems">
            <summary>
            This is the type identifier for change set item files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_ChangeSetComment">
            <summary>
            This is the type identifier for change set comment files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_ExpandedNodes">
            <summary>
            This is the type identifier for expanded nodes files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_PendingLocalDeletions">
            <summary>
            This is the type identifier for pending local deletions files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_LastStructureGetTime">
            <summary>
            This is the type identifier for last structure get time files.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MagicNumbers.VaultFileType_KnownChanges">
            <summary>
            This is the type identifier for known changes files.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserNames(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginGetUserNames(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndGetUserNames(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserNamesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserNamesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetAllUsers(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginGetAllUsers(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndGetAllUsers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetAllUsersAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetAllUsersAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetByUserId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginGetByUserId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndGetByUserId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetByUserIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetByUserIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.AddUser(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginAddUser(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndAddUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.AddUserAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.AddUserAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.UpdateUser(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginUpdateUser(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndUpdateUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.UpdateUserAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.UpdateUserAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.User,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.DeleteUser(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginDeleteUser(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndDeleteUser(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.DeleteUserAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.DeleteUserAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.HashPassword(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginHashPassword(System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndHashPassword(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.HashPasswordAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.HashPasswordAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserSecurityRoles(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginGetUserSecurityRoles(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndGetUserSecurityRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserSecurityRolesAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserSecurityRolesAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.SetUserSecurityRoles(System.Guid,System.Int32,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginSetUserSecurityRoles(System.Guid,System.Int32,System.Int32[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndSetUserSecurityRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.SetUserSecurityRolesAsync(System.Guid,System.Int32,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.SetUserSecurityRolesAsync(System.Guid,System.Int32,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetSecurityRoles(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.BeginGetSecurityRoles(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.EndGetSecurityRoles(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetSecurityRolesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetSecurityRolesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserNamesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetAllUsersCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetByUserIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.AddUserCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.UpdateUserCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.DeleteUserCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.HashPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetUserSecurityRolesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.SetUserSecurityRolesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserHandler.GetSecurityRolesCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EnterpriseConnectionTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EnterpriseConnectionTypes.DoNotAllow">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EnterpriseConnectionTypes.Allow">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EnterpriseConnectionTypes.Force">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AppearanceSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WebSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AddInSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.DashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.UserDashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SCMUserSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.UserView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.DefectsView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.FeaturesView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.TasksView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.IncidentsView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.CustomerContactSearchType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.DetailTabsSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SelectedDashboardView">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.MiniDashboardVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.MiniDashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings._selectedMainTab">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.VisibleMainTabs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowMainTabsIcon">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowMainTabsText">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.InactiveProjectsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SubprojectItemsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.InactiveReleasesVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SubreleaseItemsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SelectedProjectDetailTabIndex">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.DefectsExportSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.FeaturesExportSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.TasksExportSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.IncidentsExportSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WorkLogsExportSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.PrintHtmlDetails">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ExportHtmlDetails">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.SaveSearchSettingsOnExit">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.CultureInfo">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowHistoryInDescendingOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowCommentsInDescendingOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.TasksShowCompleted">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailsSearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailsSearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailsFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailsGroupByField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailsDetailsTabIndex">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WorkLogsFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WorkLogsGroupByField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AuditTrailsFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AuditTrailsIncludeArchived">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AuditTrailsGroupByField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.AuditTrailsSortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WikiPageTableOfContentsFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WikiSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.EmailSignature">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.DoubleClickAction">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.HiddenMultiEditFields">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.FormsNotShowingHelp">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.WikiPageSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowWelcomeScreenOnStartup">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ShowManagementConsoleOnStartup">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ReleaseDateRangeDays">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSettings.ExcludeWeekends">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings.ProjectTreeFont">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings.DefectListFont">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings.FeatureListFont">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings.TaskListFont">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AppearanceSettings.IncidentListFont">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserSecurityCache">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectWikiPage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectWikiPage.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectWikiPage.WikiPageId">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HiddenMultiEditField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HiddenMultiEditField.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HiddenMultiEditField.Name">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypes.Incident">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiSettings.TableOfContentsShowLastEditedDetails">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiSettings.ProjectChangedBehavior">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiSettings.UseLastPageVisited">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectChangedBehavior">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectChangedBehavior.ProjectHomePage">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectChangedBehavior.TableOfContents">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProjectChangedBehavior.LastPageVisited">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.CreatedDateFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.LastUpdatedDateFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.CreatedBy">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.UseCreatedBy">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.LastUpdatedBy">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.UseLastUpdatedBy">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.ShowPubliclyViewable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.ShowPubliclyEditable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.UseShowPubliclyViewable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.UseShowPubliclyEditable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.FilterBySelectedProject">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WikiPageTableOfContentsFilter.HighlightPublicPages">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter.FromDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter.UseFromDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter.ToDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter.UseToDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilter.DateRange">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.All">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.Custom">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.Today">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.Yesterday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.ThisWeek">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.LastWeek">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.Last10Days">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DateRangeFilters.Last30Days">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserType">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserType.User">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserType.CustomerContact">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.UseItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.AuditType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.UseAuditType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.AuditSource">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.UseAuditSource">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.UserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.UseUserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.AuditDateRange">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.DefectProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.FeatureProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.TaskProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTrailsFilter.IncidentProjectFilter">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTypes.New">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTypes.Change">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditTypes.Delete">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Manual">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Auto">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Workflow">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Import">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Portal">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AuditSources.Email">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.ItemId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.UseItemId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.UseItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.UserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.UseUserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.WorkLogTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.UseWorkLogTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.WorkDateRange">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.ShowArchived">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.DefectProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.FeatureProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.TaskProjectFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WorkLogsFilter.IncidentProjectFilter">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter.IncludeArchived">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter.Direction">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter.PubliclyViewable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter.IncludeItemTypes">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.EmailsFilter.SentDateRange">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DirectionFlags">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DirectionFlags.Incoming">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DirectionFlags.Outgoing">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DirectionFlags.Both">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.PubliclyViewableFlags">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.PubliclyViewableFlags.NotPubliclyViewable">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.PubliclyViewableFlags.PubliclyViewable">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.PubliclyViewableFlags.Both">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags.Defects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags.Features">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags.Tasks">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags.Incidents">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemTypeFlags.All">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.SettingsGuid">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.DashboardChart">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ChartType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.Row">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.Column">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ShowToolbar">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ShowLabels">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.Make3D">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ShowLegend">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ShowLines">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.LegendWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BaseChartSettings.ColumnWidths">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts.ItemsCount">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts.UserWorkload">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts.TrendAnalysis">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts.Burndown">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardCharts.Treemap">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes.List">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes.Pie">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes.Vbar">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes.Area">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ChartTypes.Line">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserWorkloadChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserWorkloadChartSettings.DashboardField">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardGraphField">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardGraphField.ItemCount">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardGraphField.EstimatedDuration">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardGraphField.ActualDuration">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardGraphField.RemainingDuration">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemsChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemsChartSettings.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemsChartSettings.DashboardField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ItemsChartSettings.GroupByField">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendAnalysisChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendAnalysisChartSettings.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendAnalysisChartSettings.GroupByField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendAnalysisChartSettings.DateRangeFilter">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreemapChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreemapChartSettings.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreemapChartSettings.ReleaseId">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.ItemTypes">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.DateRangeFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.ReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.TimeUnitTypeId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.IgnoreWeekdays">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.BurndownChartSettings.IncludeToday">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Sunday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Monday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Tuesday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Wednesday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Thursday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Friday">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DayOfWeek.Saturday">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.ProjectBurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.DefectsBurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.FeaturesBurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.TasksBurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.IncidentsBurndownChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.ProjectUserWorkloadChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.DefectsItemsChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.FeaturesItemsChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.TasksItemsChartSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MiniDashboardSettings.IncidentsItemsChartSettings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DetailTabsSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DetailTabsSettings.AttachmentsSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DetailTabsSettings.EmailReadingPaneSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DetailTabsSettings.WorklogPaneSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DetailTabsSettings.RelatedItemsSortString">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProductViewData">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProductViewData.SortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProductViewData.GridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ProductViewData.ToolbarHiddenButtons">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.ColorCodingForeground">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.ColorCodingBackground">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.BoldMyItems">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.FilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.FilterEnabled">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.IncludeArchived">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.GroupByField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.SearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.SearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.DetailsTabIndex">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.UserData">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.WindowsData">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ViewData.WebData">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType.None">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType.Priority">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType.Severity">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType.Status">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ColorCodingType.WorkflowStep">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData._selectedTreeViewTab">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.VisibleTreeViewTabs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.SelectedProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.ProjectsTreeCollapsedProjects">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.SelectedReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.ReleasesTreeCollapsedReleases">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.SelectedCustomerId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.SelectedCustomerContactId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreeFilterByProject">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreeSearchValue">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreeSearchFieldString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreeSearchFieldType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreeShowAllContactsForMatchingCustomers">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreePageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.CustomersTreePageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.SelectedUserId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.UsersTreeFilterByProject">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.UsersTreeShowInactiveUsers">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserViewData.UsersTreeFilterFlags">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreeViewTabs">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreeViewTabs.Projects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreeViewTabs.Customers">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreeViewTabs.Users">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TreeViewTabs.Releases">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Incident">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.WorkLog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Project">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.Customer">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.CustomerContact">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.FieldRecordTypes.EmailMessage">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UsersTreeFilterFlags">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UsersTreeFilterFlags.CreatedBy">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UsersTreeFilterFlags.ReportedBy">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UsersTreeFilterFlags.AssignedTo">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UsersTreeFilterFlags.LastUpdatedBy">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.SCMUserSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.SCMUserSettings.DefectCommentFieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.SCMUserSettings.FeatureCommentFieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.SCMUserSettings.TaskCommentFieldId">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserListDefectStatusIds">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserListFeatureStatusIds">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserListIncludeCompletedTasks">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserItemChartIncludeDefects">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserItemChartIncludeFeatures">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserItemChartIncludeTasks">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserTimeChartIncludeDefects">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.UserTimeChartIncludeFeatures">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.TrendChartTimeUnitType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.TrendChartTimeUnits">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.RefreshInterval">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.Show3DCharts">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.ShowUserChartLabels">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.ShowStatusChartLabels">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardSettings.ShowChartToolsWindow">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendChartTimeUnitTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendChartTimeUnitTypes.Days">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendChartTimeUnitTypes.Weeks">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.TrendChartTimeUnitTypes.Months">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ManageProjectsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ManageProjectsWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SelectedDefectsFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SelectedFeaturesFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.SelectedTasksFilterId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ScmLinksVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ScmDockStyle">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ScmLinksWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ScmLinksHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ItemGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.ToolbarLayout">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddInSettings.AttachmentsPreviewVisible">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.TreeViewsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.MiniDashboardLegendVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.DetailsTabsVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.ContentWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.LeftSideWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.LeftSideVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.TreeViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.DetailsHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.WikiPageHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.PageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CurrentGridWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.WorkflowToolbarMenuVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.UserStyleSheet">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.OpenLinksInNewWindow">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.AttachmentsPreviewVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.RelatedItemsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.UsersGridPageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.UsersGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomersGridPageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomersGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomersSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomerContactsGridPageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomerContactsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.CustomerContactsSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.UsersSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.FilterShowInactiveUsers">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.DefectsPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.FeaturesPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.TasksPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.IncidentsPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.EmailsPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.EmailsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.EmailsSortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.WorkLogsPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.WorkLogsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.WorkLogsSortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.AuditTrailsPageNumber">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.AuditTrailsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.FiltersGridPageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.FieldTemplatesGridPageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WebSettings.ReadEmailSettings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailSettings.ReadEmailType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailSettings.ReadEmailDelay">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailTypes.ReadOnSelection">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.ReadEmailTypes.ReadAfterDelay">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewColumnSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewColumnSettings.ColumnHeader">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewColumnSettings.Width">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewColumnSettings.DisplayOrder">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewSettings.ListViewId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericListViewSettings.ColumnSettings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.UseOnTimeFilters">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.AssignedToId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.ReleaseId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.ItemType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.Status">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.Priority">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.StartDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.DueDate">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardFilter.CompletionDate">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.SizeWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.SizeHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.LocationX">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.LocationY">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.IsMaximized">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GenericWindowSettings.FormName">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.UsersPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.UsersGraphsPanelHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.UsersItemGraphPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryPanelHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryFeaturesPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryFeaturesListPanelHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryFeaturesItemGraphPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryDefectsListPanelHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.ProjectSummaryDefectsItemGraphPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.TrendsDefectsPanelHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.TrendsDefectsFoundPanelWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DashboardWindowSettings.TrendsFeaturesCreatedPanelWidth">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddEditWindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddEditWindowSettings.SplitterDistance">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddEditWindowSettings.FieldTemplateId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddEditWindowSettings.ItemType">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.GridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.SortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.GroupField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.Filter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.AutoRefresh">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.SummaryCollapsed">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.SummarySortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.ChartCount">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.ShowOnStartup">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UserDashboardSettings.PageSize">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.ToolbarHiddenButtons">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.CustomersTreePagingEnabled">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.TreeViewWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.IsMainToolbarVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.MainToolbarDocking">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.MiniDashboardHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.MiniDashboardListHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.AttachmentsPreviewVisible">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailReadingPaneLocation">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailReadingPaneHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailReadingPaneWidth">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.DefectsListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.FeaturesListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.TasksListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.IncidentsListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.AuditTrailsListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.ProjectWikiHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailsToolbarHiddenButtons">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailsSortStrings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.EmailsListViewHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainWindowSettings.WorkLogsSortStrings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.None">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.Top">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.Bottom">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.Left">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.Right">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DockStyle.Fill">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.MainWindow">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.UserManagement">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.ManageCustomers">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.DashboardWindow">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.WindowSizes">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.ListViewSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.EmailsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.WorkLogsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.AuditTrailsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.RelatedItemsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.ManageCustomersSplitterPosition">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.CustomersGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.CustomerContactsGridSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.CustomersSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.CustomerContactsSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.UsersSortString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.FilterShowInactiveUsers">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.IncidentCustomerDetailsExpanded">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.IncidentCustomerDetailsSplitterDistance">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.ImportFolder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.WindowSettings.ReadEmailSettings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.CustomerContactSearchTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.CustomerContactSearchTypes.DropDown">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.CustomerContactSearchTypes.Search">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.CustomerContactSearchTypes.Either">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Defects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Features">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Tasks">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Worklog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Audit">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Incidents">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Projects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.MainTabs.Emails">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DoubleClickAction">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DoubleClickAction.View">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DoubleClickAction.Edit">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetAllUsersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetAllUsersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetAllUsersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetByUserIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetByUserIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetByUserIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddUserCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.AddUserCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.UpdateUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.DeleteUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HashPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HashPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.HashPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserSecurityRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserSecurityRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetUserSecurityRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.SetUserSecurityRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetSecurityRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetSecurityRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.UserService.GetSecurityRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.ExceptionStrings">
            <summary>
            Summary description for ExceptionStrings.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WatcherThread">
            <summary>
            WatcherThread is a worker thread designed to handle notifications
            from FileSystemWatchers.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WatcherThread.Start">
            <summary>
            Our thread's entry point.  Use this function when launching this class in a new thread.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WatcherThread.CreateThreadInstance(VaultClientOperationsLib.WatcherThread@,VaultClientOperationsLib.ClientInstance)">
            <summary>
            This is the function you want to use to create a WatcherThread (a new thread).
            </summary>
            <param name="threadClass">A WatcherThread variable to receive the created WatcherThread object.</param>
            <param name="ci">The ClientInstance which owns this thread.</param>
        </member>
        <member name="T:VaultClientOperationsLib.UpdateHiddenAndWorkingFileData">
            <summary>
            Used to describe an update that includes using a file delta we downloaded
            as well as attributes the user desired for this get.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UpdateHiddenFileOnlyData">
            <summary>
            Used to describe an update that only modifies data in the hidden
            folder.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UpdateWorkingFileOnlyData">
            <summary>
            Used to update files we didn't have to download any delta for (we just
            set its attributes to match what the user desired for this get).
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UpdateThread">
            <summary>
            UpdateThread is a worker thread designed to update working folders after
            items have been downloaded.  Commands are executed through the BeginCommand
            method, and results are retrieved (if desired) through GetCommandResult
            (or GetCommandResult_NoWait).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UpdateThread._commandQueue">
            <summary>
            Contains work items to be processed by the update thread.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UpdateThread._commandQueueMaxCount">
            <summary>
            The maximum number of items that can sit in the command queue.  Adding
            new items when the queue is at max capacity will block until an item is
            removed from the queue (processed by the worker thread).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.UpdateThread._resultHash">
            <summary>
            Contains result items for commands.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UpdateThread.ExecuteCommandInCallingThread(VaultClientOperationsLib.UpdateThreadCommand)">
            <summary>
            Runs an update thread command, but not inside the update thread.  Blocks 
            until the command is completed.  This allows a user of this class to 
            avoid an ASP.NET bug where new threads in web services don't inherit
            any impersonation settings.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:VaultClientOperationsLib.UpdateThread.Start">
            <summary>
            Our thread's entry point.  Use this function when launching this class in a new thread.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.UpdateThread.ProcessCommand(VaultClientOperationsLib.UpdateThreadCommand,VaultClientOperationsLib.UpdateThreadCommandResult@)">
            <summary>
            Takes a command (fed from the _commandQueue) and performs the command's
            action.
            </summary>
            <param name="command">The command to process.</param>
            <param name="outputResult">A reference to an UpdateThreadCommandResult variable.  The result will be created and attached to this variable.</param>
            <returns>true if thread execution should continue, false if the thread should be stopped.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.UpdateThread.CreateThreadInstance(System.Threading.Thread@,VaultClientOperationsLib.UpdateThread@,System.Boolean)">
            <summary>
            This is the function you want to use to create a UpdateThread (a new thread).
            </summary>
            <param name="newThread">A Thread variable to receive the created Thread.</param>
            <param name="threadClass">An UpdateThread variable to receive the created UpdateThread class.</param>
            <param name="isForLabelGet"></param>
        </member>
        <member name="T:VaultClientOperationsLib.SyncItem">
            <summary>
            These classes represent
            changes to a repository (deletions of folders or files) that were
            detected during a tree refresh, but need to be saved away to act
            upon later (like when Perform Local Deletions is invoked after a
            Get Latest Version).
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.sourceStart">
            <summary>
            Starting line number of interesting block.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.sourceCount">
            <summary>
            Length of interesting block.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.sourceText">
            <summary>
            Contents of interesting block.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.targetStart">
            <summary>
            Starting line number of corresponding block in another file.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.targetCount">
            <summary>
            Length of corresponding block.
            If zero, then block was deleted, and targetStart is the first line
            of where the block used to be.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.targetText">
            <summary>
            Contents of corresponding block.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.TranslateLinesResponse.differ">
            <summary>
            Whether the two blocks differ according to rules used by DiffList.
            Note the exact bytes contained in this object may not match even
            when <code>differ</code> is false due to EOL and whitespace rules.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.Compare.TranslateLines(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            <para>Determine where certain lines in one file moved to in another file.
            Typically, sourceFile is a newer version of a file (i.e. the user's
            working file) while targetFile is an older version from the repository.
            Note the returned line numbers may encompass a larger region if we
            can't determine precise location for the start and end nodes.</para>
            
            <para>Note that all line numbers are 0-based, and the line parameters
            are cropped to the size of sourceFile.</para>
            </summary>
            <param name="sourceFile">Path and name of file containing block to translate.</param>
            <param name="startLine">Start of interesting block in sourceFile</param>
            <param name="countLines">Length of interesting block in sourceFile; must be greater than 0.</param>
            <param name="targetFile">Path and name of modified file.</param>
            <returns>Description of where the interesting block moved, and whether it changed.</returns>
        </member>
        <member name="T:VaultClientOperationsLib.Resources">
            <summary>
            A resource class that contains static ResourceManager instances that can be used by various parts of the application
            without having to create a new instance of a ResourceManager
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.Resources.ExceptionStrings">
            <summary>
            Exception strings
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.Resources.StatusBarMessages">
            <summary>
            Status Bar messages
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.Resources.ChangeSetItems">
            <summary>
            ChangeSetItem strings
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.Resources.ProgressMessages">
            <summary>
            Progress messages
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.Resources.PropertiesFormatStrings">
            <summary>
            Format strings for item properties
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeRelease.CopyTo(VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeRelease@)">
            <summary>
            Shallow copy of members to the passed in Release
            Does not copy over the children.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeRelease.UpdateSubItemsPath">
            <summary>
            This method will set "path" values down the releases.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.AxosoftOnTimeProject.UpdateSubItemsPath">
            <summary>
            This method will set "path" values down the releases.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.#ctor">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomers(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetAllCustomers(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetAllCustomers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersWithNames(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetAllCustomersWithNames(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetAllCustomersWithNames(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersWithNamesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersWithNamesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContacts(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetAllCustomerContacts(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetAllCustomerContacts(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsByCustomerId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetAllCustomerContactsByCustomerId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetAllCustomerContactsByCustomerId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsByCustomerIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsByCustomerIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.SearchCustomers(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginSearchCustomers(System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndSearchCustomers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.SearchCustomersAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.SearchCustomersAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerByCustomerId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerByCustomerId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerByCustomerId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerByCustomerIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerByCustomerIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactByCustomerContactId(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerContactByCustomerContactId(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerContactByCustomerContactId(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactByCustomerContactIdAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactByCustomerContactIdAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomer(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginAddCustomer(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndAddCustomer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerContact(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginAddCustomerContact(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndAddCustomerContact(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerContactAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerContactAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomer(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginUpdateCustomer(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndUpdateCustomer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.Customer,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerContact(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginUpdateCustomerContact(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndUpdateCustomerContact(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerContactAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerContactAsync(System.Guid,VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContact,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomer(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginDeleteCustomer(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndDeleteCustomer(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerContact(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginDeleteCustomerContact(System.Guid,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndDeleteCustomerContact(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerContactAsync(System.Guid,System.Int32)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerContactAsync(System.Guid,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetRemainingCustomerPortalLicenses(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetRemainingCustomerPortalLicenses(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetRemainingCustomerPortalLicenses(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetRemainingCustomerPortalLicensesAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetRemainingCustomerPortalLicensesAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EncryptPassword(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginEncryptPassword(System.Guid,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndEncryptPassword(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EncryptPasswordAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EncryptPasswordAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldValuesList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerCustomFieldValuesList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerCustomFieldValuesList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldValuesListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldValuesListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldsList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerCustomFieldsList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerCustomFieldsList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldsListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldsListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldValuesList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerContactCustomFieldValuesList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerContactCustomFieldValuesList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldValuesListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldValuesListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldsList(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.BeginGetCustomerContactCustomFieldsList(System.Guid,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EndGetCustomerContactCustomFieldsList(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldsListAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldsListAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomersWithNamesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetAllCustomerContactsByCustomerIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.SearchCustomersCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerByCustomerIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactByCustomerContactIdCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.AddCustomerContactCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.UpdateCustomerContactCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.DeleteCustomerContactCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetRemainingCustomerPortalLicensesCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.EncryptPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldValuesListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerCustomFieldsListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldValuesListCompleted">
            <remarks/>
        </member>
        <member name="E:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerHandler.GetCustomerContactCustomFieldsListCompleted">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldValue">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldValue.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldValue.Value">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.CustomFieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.TableFieldName">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.FieldType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.RecordType">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.FieldLabel">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.PickListId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.StringSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.Format">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.DisplayOrder">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.IsMultiSelect">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.IsEditable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.IsCustomField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.IsGroupable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.IsSearchable">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.SortExpression">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomField.SelectExpression">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.Double">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.String">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.DateTime">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.PickList">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.Text">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.Boolean">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.Hyperlink">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomFieldTypes.Comments">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Defect">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Feature">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Task">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Incident">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.WorkLog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Project">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.Customer">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomRecordTypes.CustomerContact">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.ProjectWikiPage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.ProjectWikiPage.ProjectId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.ProjectWikiPage.WikiPageId">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactFilter.FieldId">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactFilter.FilterValue">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.PageSize">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.CurrentSelectedMainTab">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectPage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectSort">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectSearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectSearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeaturePage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeatureSort">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeatureSearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeatureSearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskPage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskSort">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskSearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskSearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentPage">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentSort">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentSearchField">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentSearchString">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeatureFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskFilterSettings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentFilterSetttings">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.DefectListFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.FeatureListFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.TaskListFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.IncidentListFilter">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.WikiPageHeight">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactSettings.WikiPageSettings">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Defects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Features">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Tasks">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Worklog">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Audit">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Incidents">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Projects">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.MainTabs.Emails">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactItemListFilter">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactItemListFilter.All">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactItemListFilter.PublicOnly">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactItemListFilter.PrivateOnly">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactStatus">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactStatus.New">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactStatus.Approved">
            <remarks/>
        </member>
        <member name="F:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.CustomerContactStatus.Rejected">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersWithNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersWithNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomersWithNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsByCustomerIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsByCustomerIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetAllCustomerContactsByCustomerIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.SearchCustomersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.SearchCustomersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.SearchCustomersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerByCustomerIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerByCustomerIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerByCustomerIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactByCustomerContactIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactByCustomerContactIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactByCustomerContactIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerContactCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.AddCustomerContactCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.UpdateCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.UpdateCustomerContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.DeleteCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.DeleteCustomerContactCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetRemainingCustomerPortalLicensesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetRemainingCustomerPortalLicensesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetRemainingCustomerPortalLicensesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.EncryptPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.EncryptPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.EncryptPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldValuesListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldValuesListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldValuesListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldsListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldsListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerCustomFieldsListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldValuesListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldValuesListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldValuesListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldsListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldsListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:VaultClientOperationsLib.IntegrationComponents.Axosoft_OnTime.CustomerService.GetCustomerContactCustomFieldsListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:VaultClientOperationsLib.DisplayCallback">
            <summary>
            Delegate for prompting the user with some information or errors
            </summary>
            
        </member>
        <member name="T:VaultClientOperationsLib.DisplayPrompt">
            <summary>
            Class containing some state info and a function to call a delegate function
            to display some information to the user.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.RepositoryTraversalType">
            <summary>
            An enum listing traversal types.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.SetFileTimeType">
            <summary>
            An enum listing the possible choices for SetFileTime
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.SetFileTimeType.Current">
            <summary>
            Set file time to current time
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.SetFileTimeType.Modification">
            <summary>
            Set file time to modification time
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.SetFileTimeType.CheckIn">
            <summary>
            Set file time to checkin time
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.DoubleClickOnFile">
            <summary>
            An enum listing the possible options for double-clicking on a file
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DoubleClickOnFile.View">
            <summary>
            Double click views the file
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DoubleClickOnFile.Edit">
            <summary>
            Double click edits the file
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.PerformDeletionsType">
            <summary>
            An enum listing the possible choices for the PerformDeletions option
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PerformDeletionsType.RemoveWorkingCopy">
            <summary>
            Remove working copy when deleted from the repository
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PerformDeletionsType.DoNotRemoveWorkingCopy">
            <summary>
            Do not remove working copy when deleted from the repository
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.PerformDeletionsType.RemoveWorkingCopyIfUnmodified">
            <summary>
            Remove working copy when deleted from the repository only if it is unmodified
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.MakeWritableType">
            <summary>
            An enum listing the possible choices for the MakeWritable option
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MakeWritableType.MakeNonMergableFilesReadOnly">
            <summary>
            Make non-mergeable files read-only
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MakeWritableType.MakeAllFilesReadOnly">
            <summary>
            Make all files read-only
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MakeWritableType.MakeAllFilesWritable">
            <summary>
            Make all files read-write
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.MergeType">
            <summary>
            An enum listing the possible choices for the Merge option
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MergeType.OverwriteWorkingCopy">
            <summary>
            Overwrite the working copy
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MergeType.MergeLater">
            <summary>
            Do nothing (merge later)
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MergeType.AttemptAutomaticMerge">
            <summary>
            Attempt to automatically mnerge the files
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.MergeType.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.LocalCopyType">
            <summary>
            An enum listing the possible choices for the LocalCopy option
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.LocalCopyType.Replace">
            <summary>
            Replace local copies
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.LocalCopyType.Leave">
            <summary>
            Leave local copies
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.LocalCopyType.Delete">
            <summary>
            Delete local copies
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.PreviousRepositoryVersion">
            <summary>
            diff the version last retrieved from the database.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.CurrentRepositoryVersion">
            <summary>
            diff against the current item in the repository
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.WorkingFolderItem">
            <summary>
            diff against the item in the working folder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.Label">
            <summary>
            diff against the item found within the label
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.AnyLocalItem">
            <summary>
            diff against any valid local item
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffAgainstType.AnyRepositoryItem">
            <summary>
            diff against any valid repository item
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffShelvedAgainstType.ShelvedBaseline">
            <summary>
            diff the shelved file/folder against the baseline of that file when the shelve occurred
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffShelvedAgainstType.WorkingFolder">
            <summary>
            diff the shelved file/folder against the working file/folder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffShelvedAgainstType.PreviousRepositoryVersion">
            <summary>
            diff the working file against the last version retrieved from the database
            note:  this option only present during shelved file diff, not full shelveset diff
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.DiffShelvedAgainstType.AnotherShelveset">
            <summary>
            diff 2 unique shelvesets
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CommitType.Commit_Vault">
            <summary>
            Commit called from a normal Vault point of view
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CommitType.Commit_VSSImport">
            <summary>
            Commit called from VSS Import
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.CommitType.Commit_VaultFolderImport">
            <summary>
            Commit called from Vault Folder Import.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientCheckOutList">
            <summary>
            VaultClientCheckOutList contains check out items for a specific list version.
            It is saved to disk between Vault sessions.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientCheckOutList._revision">
            <summary>
            The check out list revision number.  Increases with each server-side change to the list.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientCheckOutList._lastUpdate">
            <summary>
            The last time the check out list was updated.  This is the value the server returns in
            GetCheckOutListChanges, and is required to be sent in the same call.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.#ctor(VaultClientOperationsLib.VaultClientCheckOutList)">
            <summary>
            Creates an instance of the class from an existing instance.  Revision and LastUpdate values are copied, and
            references to the list contents are copied (the items themselves are not duplicated).
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.Reset">
            <summary>
            Resets the check out list to an empty state.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.UpdateFromCompleteList(System.Int64,VaultLib.VaultDateTime,VaultLib.VaultCheckOutItem[])">
            <summary>
            Update the check out list using a complete new list of check outs.  This list is first
            cleared before the new items are used.
            </summary>
            <param name="targetRevision">The new server-determined revision of this check out list.</param>
            <param name="newLastUpdate">The new server-determined last update time of this check out list.</param>
            <param name="newCompleteList">The complete list of check outs as returned by the server.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.UpdateFromChangesLists(System.Int64,System.Int64,VaultLib.VaultDateTime,VaultLib.VaultCheckOutItem[],VaultLib.VaultCheckOutRelease[])">
            <summary>
            Update the check out list using two lists of changes.  This list is modified to include the new
            added items and deleted items (or user subitems).
            </summary>
            <param name="sourceRevision">The revision of the source list that the changes were made from.</param>
            <param name="targetRevision">The new server-determined revision of the target list the changes describe..</param>
            <param name="newLastUpdate">The new server-determined last update time of this check out list.</param>
            <param name="newItems">The check out items to add to the existing list.</param>
            <param name="releaseItems">The check out items to remove from the existing list.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.Write(System.IO.Stream)">
            <summary>
            Writes a check out list to a stream in proprietary SourceGear Vault format.
            </summary>
            <param name="outputStream">The output stream to write the check out list to.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.Write_1(System.IO.BinaryWriter)">
            <summary>
            Writes format version 1.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.Read(System.IO.Stream)">
            <summary>
            Reads a check out list from a stream in proprietary SourceGear Vault format.
            </summary>
            <param name="inputStream">The stream to read the check out list from.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutList.Read_1(System.IO.BinaryReader)">
            <summary>
            Reads format version 1.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutList.Revision">
            <summary>
            Gets the server-determined revision of the check out list.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutList.LastUpdate">
            <summary>
            Gets the time this list was last updated by a check out or undo check out request to the server by any client.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientTreeObject">
            <summary>
            VaultClientTreeObject is the base class for VaultClientFile and VaultClientFolder.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObject.IsPinnable(System.String@,System.Int64@)">
            <summary>
            WARNING : Don't use this on the root folder (it won't work correctly).
            An object can't be pinned if it has a parent that is pinned or is pinned itself.
            </summary>
            <param name="pinnedPath">If the object is not pinnable, this will contain the currently pinned path preventing the pin</param>
            <param name="version">If the object is not pinnable, this will contain the currently pinned version of pinnedPath</param>
            <returns>true if this object can be pinned, false if it can not</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObject.IsUnPinnable(System.String@,System.Int64@)">
            <summary>
            An object can only be unpinned if it is (1) not the root folder (2) pinned (3) has no pinned parents.
            </summary>
            <param name="pinnedPath">If the object is not unpinnable, this will contain the currently pinned path preventing the unpin</param>
            <param name="version">If the object is not unpinnable, this will contain the currently pinned version of pinnedPath</param>
            <returns>true if this object can be unpinned, false if it can not</returns>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.Parent">
            <summary>
            The parent folder of this object.  If this object is a folder and it's the repository's root, the parent is null.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.ID">
            <summary>
            The object ID of this object.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.Version">
            <summary>
            The user-friendly version number of this object
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.ObjVerID">
            <summary>
            The object version ID of this object
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.Name">
            <summary>
            The name of this object (not its full path)
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.ModifiedDate">
            <summary>
            The object's last modified date
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.TxDate">
            <summary>
            The object's transaction date
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.PinFromObjVerID">
            <summary>
            The object version ID the object is pinned from
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.Labeled">
            <summary>
            Whether or not the object is labeled
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.IsPinned">
            <summary>
            Gets whether or not the folder is pinned
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.FullPath">
            <summary>
            The full repository path of this object
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.IsPinnedRecursive">
            <summary>
            Gets whether this object (or any of its parents) is pinned.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObject.Branched">
            <summary>
            Whether or not the object is branched
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientTreeObjectColl">
            <summary>
            A collection (ArrayList) of VaultClientTreeObject items
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.Add(VaultClientOperationsLib.VaultClientTreeObject)">
            <summary>
            Adds a tree object to the collection
            </summary>
            <param name="o">The object to add</param>
            <returns>The index at which the object was added</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.Remove(VaultClientOperationsLib.VaultClientTreeObject)">
            <summary>
            Removes a tree object from a collection.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.Remove(System.Int64)">
            <summary>
            Removes all instances of a tree object with the given ID from the collection
            </summary>
            <param name="ID">The tree object ID to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.Get(System.Int64)">
            <summary>
            Gets a tree object from the collection by folder ID
            </summary>
            <param name="ID">The ID of the object to get</param>
            <returns>The object if found, or null otherwise</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientTreeObjectColl.Get(System.String)">
            <summary>
            Gets a tree object from the collection by name
            </summary>
            <param name="name">The name of the object to get</param>
            <returns>The object if found, or null otherwise</returns>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientTreeObjectColl.Item(System.Int32)">
            <summary>
            indexer
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientFolder">
            <summary>
            VaultClientFolder is the object the client uses to represent a folder
            in the repository.  For most situations, client writers will never
            construct one of these objects.  Rather, you should obtain the
            root folder from ClientInstance.Repository.Root.  Once you have
            a VaultClientFolder object, you can iterate over all its subfolders
            and files.  So if you have the VaultClientFolder for the root folder
            of the repository, you can locate anything in that repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFolder._files">
            <summary>
            Collection of files contained in this folder
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFolder._folders">
            <summary>
            Collection of folders conatained in this folder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.#ctor(VaultLib.VaultFolderDelta,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Constructor based on a folder delta and parent
            </summary>
            <param name="fd"></param>
            <param name="parent"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.#ctor(VaultLib.VaultFolderDelta,VaultClientOperationsLib.VaultClientFolder,VaultClientOperationsLib.TreeCache)">
            <summary>
            Constructor based on a folder delta, parent, and treecache
            </summary>
            <param name="fd"></param>
            <param name="parent"></param>
            <param name="treeCache"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.Update(VaultLib.VaultFolderDelta,System.String,System.Collections.ArrayList,System.Collections.ArrayList,VaultClientOperationsLib.TreeCache)">
            <summary>
            Updates this folder with new delta information
            </summary>
            <param name="fd"></param>
            <param name="deltaFolderPath"></param>
            <param name="deletedObjects"></param>
            <param name="addedObjects"></param>
            <param name="treeCache"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.Clone(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Creates a duplicate of this folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetObjectByName(System.String)">
            <summary>
            Returns the file or folder object this folder has that matches the given
            short name.
            </summary>
            <param name="name">The given name (not full path) to search for.</param>
            <returns>The found object, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetObjectByID(System.Int64,System.Boolean)">
            <summary>
            Returns the file or folder object this folder has that matches the given
            ID.
            </summary>
            <param name="id">The given ID to search for.</param>
            <param name="recursive"></param>
            <returns>The found object, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFilesRecursive(VaultClientOperationsLib.VaultClientFileColl@,VaultLib.VaultNameValueCollection)">
            <summary>
            Fills a collection with all files in this folder and subfolders.
            Does not descend labeled folders.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFilesRecursive(VaultClientOperationsLib.VaultClientFileColl@,VaultLib.VaultNameValueCollection,System.Boolean)">
            <summary>
            Fills a collection with all files in this folder and subfolders.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFilesByRegex(VaultClientOperationsLib.VaultClientFileColl@,System.Collections.ArrayList,System.Boolean,VaultLib.VaultNameValueCollection,System.Boolean)">
            <summary>
            Fills a collection with all files in this folder (and subfolders, if recursive
            is specified) whose name matches a given regex
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFoldersRecursive(VaultClientOperationsLib.VaultClientFolderColl@,VaultLib.VaultNameValueCollection)">
            <summary>
            Fills a collection with all folders in this folder and subfolders.
            Does not descend labeled folders.
            </summary>
            <param name="coll">The collection to fill</param>
            <param name="nvcCloaks">The array from ClientInstance of cloaked folders.  Passing null ignores all cloaks.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFoldersRecursive(VaultClientOperationsLib.VaultClientFolderColl@,VaultLib.VaultNameValueCollection,System.Boolean)">
            <summary>
            Fills a collection with all folders in this folder and subfolders.
            </summary>
            <param name="coll">The collection to fill</param>
            <param name="nvcCloaks">The array from ClientInstance of cloaked folders.  Passing null ignores all cloaks (their contents will be returned).</param>
            <param name="descendLabels">Descend into labels or not.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFoldersRecursive_DiskPath(System.Collections.ArrayList,System.String)">
            <summary>
            Fills a collection with the disk paths for all of the folders in this folder and subfolders.
            Does not respect cloaks, but does respect labels.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFoldersByRegex(VaultClientOperationsLib.VaultClientFolderColl@,System.Collections.ArrayList,System.Boolean,VaultLib.VaultNameValueCollection,System.Boolean)">
            <summary>
            Fills a collection with all subfolders in this folder (if recursive
            is specified) whose name matches a given regex
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFileRecursive(System.String)">
            <summary>
            Finds a file by its full path starting in this folder, then searching all
            subfolders.  This function does not recursively call itself and is 
            efficient.
            </summary>
            <param name="fullPath">The full path of the file to find.</param>
            <returns>The found file, null if the file was not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFileRecursive(System.Int64,System.Int64)">
            <summary>
            Finds a file by its id and its parent starting in this folder, then searching all
            subfolders.  
            </summary>
            <param name="fileID">ID of the file</param>
            <param name="parentID">ID of the parent</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFileRecursive(System.Int64)">
            <summary>
            WARNING : You probably don't want to use this function.
            
            A single ID can appear multiple times in a tree (if it's shared).  This function
            will return the first one it finds.  Use FindFileRecursive(string fullPath)
            instead to find a file uniquely.
            </summary>
            <param name="id">The ID of the file to find.</param>
            <returns>The first file matching the given ID, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFolderRecursive(System.Int64)">
            <summary>
            WARNING : You probably don't want to use this function.
            
            A single ID can appear multiple times in a tree (if it's shared).  This function
            will return the first one it finds.  Use FindFolderRecursive(string fullPath)
            instead to find a folder uniquely.
            </summary>
            <param name="id">The folder ID to search for</param>
            <returns>The first folder matching the given ID, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFolderRecursive(System.Int64,System.Int64)">
            <summary>
            Finds a Folder by its ID and its parent's ID starting in this folder, then 
            searching all subfolders.  
            </summary>
            <param name="folderID">The ID of the folder we're looking for.</param>
            <param name="parentID">The ID of the parent of the folder we're looking for.</param>
            <returns>The folder with the matching ID and parent ID, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFolderRecursive(System.String)">
            <summary>
            Finds a folder by its full path starting in this folder, then searching all
            subfolders.  This function does not recursively call itself and is 
            efficient.
            </summary>
            <param name="fullPath">The full path of the folder to find.</param>
            <returns>The found folder, null if the folder was not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFilesRecursive(System.Int64,VaultClientOperationsLib.VaultClientFileColl@)">
            <summary>
            Searches recursively for all files matching the given ID
            </summary>
            <param name="id">The file ID to search for</param>
            <param name="files">Returns the list of files found</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.SearchForTheseIDsRecursively(System.Collections.ICollection,VaultClientOperationsLib.VaultClientFolderColl@)">
            <summary>
            Searches recursively for all folders matching the given ID
            </summary>
            <param name="IDs">The folder IDs to search for</param>
            <param name="folders">Returns the list of folders found</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFoldersRecursive(System.Int64,VaultClientOperationsLib.VaultClientFolderColl@)">
            <summary>
            Searches recursively for all folders matching the given ID
            </summary>
            <param name="id">The folder ID to search for</param>
            <param name="folders">Returns the list of folders found</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindTreeObjectsRecursive(System.Int64,VaultClientOperationsLib.VaultClientTreeObjectColl@)">
            <summary>
            Searches recursively for any tree objects matching the given ID.
            </summary>
            <param name="id">The ID to search for.</param>
            <param name="objects">An array that will be filled with the matching tree objects.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFilesRecursive(System.Collections.Hashtable,VaultClientOperationsLib.TreeCache,VaultClientOperationsLib.VaultClientFolder.FileFoundDelegate)">
            <summary>
            Iterates (recursively) through the folder. Whenever it finds a file matching
            any of the IDs provided (as keys in the hashtable) it calls the delegate that
            you gave to handle the finding of the file.
            </summary>
            <remarks>
            This function does not recurse into Cloaked folders.
            </remarks>
            <param name="FileIDHash">Hashtable with File IDs as Keys.</param>
            <param name="treeCache">The Tree Cache. Used to test for Cloakedness.</param>
            <param name="handler">The function you want called whenever a file is found.
            When called, the first parameter will be the file and the second parameter
            will be whatever you had in the hashtable (the Value) for the file's File ID.
            </param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindFilesNonrecursive(System.Collections.Hashtable,VaultClientOperationsLib.VaultClientFolder.FileFoundDelegate)">
            <summary>
            Iterates through the files in the folder. Whenever it finds a file matching
            any of the IDs provided (as keys in the hashtable) it calls the delegate that
            you gave to handle the finding of the file.
            </summary>
            <param name="FileIDHash">Hashtable with File IDs as Keys.</param>
            <param name="handler">The function you want called whenever a file is found.
            When called, the first parameter will be the file and the second parameter
            will be whatever you had in the hashtable (the Value) for the file's File ID.
            </param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.FindTreeObjectRecursive(System.String)">
            <summary>
            Finds a tree object by its full path starting in this folder, then searching all
            subfolders.  This function does not recursively call itself and is 
            efficient.
            </summary>
            <param name="fullPath">The full path of the object to find.</param>
            <returns>The object found, null if not found.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.HasFile(System.String)">
            <summary>
            Test to see if the file that corresponds to fullPath is in this folder's
            child file.  This search is not recursive.
            </summary>
            <param name="fullPath">The full path of the file to find.</param>
            <returns>true if the file is contained by this, false if not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.HasFolder(System.String)">
            <summary>
            Test to see if the folder that corresponds to fullPath is in this folder's
            child folders.  This search is not recursive.
            </summary>
            <param name="fullPath">The full path of the folder to find.</param>
            <returns>true if the folder is contained by this, false if not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a folder to a stream faster than Microsoft binary serialization.  You probably
            don't want to call this function directly (it is meant to be used by 
            VaultClientRepository.Write).
            </summary>
            <param name="bw">The binary writer to use.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.Read(System.IO.BinaryReader,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Reads a folder from a stream faster than Microsoft binary serialization.  You probably
            don't want to call this function directly (it is meant to be used by 
            VaultClientRepository.Read).
            </summary>
            <param name="br">The binary reader to use.</param>
            <param name="parent">The parent VaultClientFolder of the new folder being read.  Can be null for the root folder.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFolderProperties">
            <summary>
            Returns Vault folder properties for this folder
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolder.GetFileSizeRecursive">
            <summary>
            Returns the sum of the file sizes for all files under this folder
            Recursively traverses the entire tree below this folder
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFolder.Files">
            <summary>
            The collection of files which are immediately contained within this folder
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFolder.Folders">
            <summary>
            The collection of subfolders which are immediately contained within this folder
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientFolderColl">
            <summary>
            A collection (ArrayList) of VaultClientFolder items
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.Add(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Adds a folder to the collection
            </summary>
            <param name="f">The folder to add</param>
            <returns>The index at which the object was added</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.Remove(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Removes a folder from the collection
            </summary>
            <param name="f">The folder to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.Remove(System.Int64)">
            <summary>
            Removes all instances of a folder with the given ID from the collection
            </summary>
            <param name="ID">The folder ID to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.Get(System.Int64)">
            <summary>
            Gets a folder from the collection by folder ID
            </summary>
            <param name="ID">The ID of the folder to get</param>
            <returns>The folder if found, or null otherwise</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFolderColl.Get(System.String)">
            <summary>
            Gets a folder from the collection by folder name
            </summary>
            <param name="name">The name of the folder to get</param>
            <returns>The folder if found, or null otherwise</returns>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientFile">
            <summary>
            VaultClientFile is the object used on the client to represent a file in the repository.
            In general, you should never construct one of these objects as a client writer.  Rather,
            these objects are obtained by walking the repository structure.  Start at ClientInstance.Repository.Root and
            use the Folders and Files properties to iterate contents of the root folder and downward.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFile._mergable">
            <summary>
            The file's mergeable state
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFile._eol">
            <summary>
            The file's EOL setting
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFile._fileLength">
            <summary>
            The file's length
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.VaultClientFile._fileCRC">
            <summary>
            The file's CRC value
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.#ctor(VaultLib.VaultFileDelta,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Just initialize from what is described
            </summary>
            <param name="f"></param>
            <param name="parent"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.#ctor(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Initialize based on another VaultClientFile
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.Update(VaultLib.VaultFileDelta)">
            <summary>
            Update the file with the given delta info
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.Clone(VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Create a duplicate of the file
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a file to a stream faster than Microsoft binary serialization.  You probably
            don't want to call this function directly (it is meant to be used by 
            VaultClientFolder.Write).
            </summary>
            <param name="bw">The binary writer to use.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.Read(System.IO.BinaryReader,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            Reads a file from a stream faster than Microsoft binary serialization.  You probably
            don't want to call this function directly (it is meant to be used by 
            VaultClientFolder.Read).
            </summary>
            <param name="br">The binary reader to use.</param>
            <param name="parent">The parent folder for the file being read.</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFile.GetFileProperties">
            <summary>
            Returns Vault folder properties for this folder
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFile.Mergable">
            <summary>
            The file's mergeability setting
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFile.EOL">
            <summary>
            The file's EOL setting
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFile.FileLength">
            <summary>
            The length of this file, in bytes
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientFile.FileCRC">
            <summary>
            Gets/Sets the file's CRC value
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientFileColl">
            <summary>
            A collection (ArrayList) of VaultClientFile items
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.Add(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Adds the given file to the collection
            </summary>
            <param name="f">The file to add</param>
            <returns>The index position the file was added at</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.Remove(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Removes a given file from the collection
            </summary>
            <param name="f">The file to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.Remove(System.Int64)">
            <summary>
            Removes all instances of files with the given ID from the collection
            </summary>
            <param name="ID">The file ID to remove</param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.Get(System.Int64)">
            <summary>
            Gets a file with the given ID from the collection
            </summary>
            <param name="ID">The file ID to search for</param>
            <returns>Returns the file if found, or null otherwise</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientFileColl.Get(System.String)">
            <summary>
            Gets a file with the given name from the collection
            </summary>
            <param name="name">The file name to search for</param>
            <returns>Returns the file if found, or null otherwise</returns>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientCheckOutItem">
            <summary>
            VaultClientCheckOutItem class
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutItem.#ctor(VaultLib.VaultCheckOutItem)">
            <summary>
            Creates a new instance with values from an existing VaultCheckOutItem
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutItem.#ctor(VaultClientOperationsLib.VaultClient_CheckOutItem_UserItem)">
            <summary>
            Creates a new instance with values from an existing VaultClient_CheckOutItem_UserItem
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutItem.Equals(VaultClientOperationsLib.VaultClientCheckOutItem)">
            <summary>
            Determines if this instance is equivalent to the spcified item
            </summary>
            <param name="item">The item to compare with</param>
            <returns>True if the item is equivalent</returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutItem.Write_1(System.IO.BinaryWriter)">
            <summary>
            Writes format version 1.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutItem.Read_1(System.IO.BinaryReader)">
            <summary>
            Reads format version 1.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutItem.FileID">
            <summary>
            The file ID of this check out item
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutItem.CheckOutUsers">
            <summary>
            List of users this item is checked out to
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientCheckOutUser">
            <summary>
            VaultClientCheckOutUser class
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutUser.#ctor(VaultLib.VaultCheckOutUser)">
            <summary>
            Creates a new instance based on values in an existing VaultCheckOutUser item
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutUser.#ctor">
            <summary>
            Protected so read/write can use it.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutUser.Equals(VaultClientOperationsLib.VaultClientCheckOutUser)">
            <summary>
            Returns true if the values for this instance equal the specified values
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutUser.Write_1(System.IO.BinaryWriter)">
            <summary>
            Writes format version 1.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientCheckOutUser.Read_1(System.IO.BinaryReader)">
            <summary>
            Reads format version 1.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.Name">
            <summary>
            Name of the user
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.LockType">
            <summary>
            Check out type
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.LockedWhen">
            <summary>
            Date the item was checked out
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.FolderID">
            <summary>
            Folder ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.LocalPath">
            <summary>
            Check out to local path
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.Hostname">
            <summary>
            Check out to this host name
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.RepPath">
            <summary>
            Repository path
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.Comment">
            <summary>
            Check out comment
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientCheckOutUser.MiscInfo">
            <summary>
            misc info
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.VaultClientRepositoryOptions">
            <summary>
            Class containing various repository options
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepositoryOptions.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.VaultClientRepositoryOptions.#ctor(VaultLib.VaultRepositoryOptions)">
            <summary>
            Creates a new VaultClientRepositoryOptions based on an existing VaultRepositoryOptions
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.RepID">
            <summary>
            Gets the repository ID
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.CheckInCommentReq">
            <summary>
            True if check in comments are required for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.BugURL">
            <summary>
            The Bug URL to use for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.RequireBugID">
            <summary>
            See if BugID is required
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.BugTrackingAppExtraData">
            <summary>
            Bug Application extra data.
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.ExclusiveLocksRequired">
            <summary>
            True if exclusive locks are required for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.MergeableFileExtensions">
            <summary>
            List of mergeable file extensions for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.FileExclusionList">
            <summary>
            List of file patterns to exclude from Add operations
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.FolderExclusionList">
            <summary>
            List of folder patterns to exclude from Add operations
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.DefaultEOL">
            <summary>
            Default EOL setting for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.ExpandKeywords">
            <summary>
            True to expand keywords for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.KeywordExpansionInfo">
            <summary>
            List of keyword expansion settings for this repository
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.VaultClientRepositoryOptions.MaxRequestLengthBytes">
            <summary>
            Maximum request length in bytes
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.UnknownFile">
            <summary>
            used to resolve unknown files.  See ResolveUnknownFiles in clientinstance.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.DeltaTreeObject">
            <summary>
            Used for tracking moves and deletes in deltas.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.ClientInstanceDataChangedEvent">
            <summary>
            An MFC type event handling device.  used to send notification around
            to pre-existing GUI objects within the Vault Framework.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderGhostFolderColl">
            <summary>
            Collection of ghost folder objects
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.KindOfMerge">
            <summary>
            When a file has NeedsMerge status, this enum is used to describe why.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KindOfMerge.None">
            <summary>
            The file does not need merging
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KindOfMerge.ConcurrentEditsFromRepository">
            <summary>
            The file has been modified both locally and in the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.KindOfMerge.MergeBranches">
            <summary>
            Changes need to be merged from a branch.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileStatus">
            <summary>
            This enum describes the status of a working file with respect to the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.None">
            <summary>
            The working file is identical to the latest known version in the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Edited">
            <summary>
            The working file has been edited and the baseline is current.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Merged">
            <summary>
            A NeedsMerge status has been resolved.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Missing">
            <summary>
            The working file is missing.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.MoreRecent">
            <summary>
            The working file is more recent than anything known in the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.NeedsMerge">
            <summary>
            The working file has been edited and the baseline is old.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Old">
            <summary>
            There is a newer version of this file in the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Renegade">
            <summary>
            The working file has been modified without being checked out, and the user options indicate that files are supposed to be checked out before editing.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileStatus.Unknown">
            <summary>
            There is a file where the working file should be, but its condition is unknown.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileAge">
            <summary>
            This enum describes the status of the baseline of a working file with respect to the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileAge.Old">
            <summary>
            The baseline is out of date.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileAge.Current">
            <summary>
            The baseline is current
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileAge.New">
            <summary>
            The baseline is newer than anything we know about in the repository.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileMergeState">
            <summary>
            This enum describes a working folder's file merge state
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileMergeState.None">
            <summary>
            The file does not need merging
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileMergeState.NeedsMerge">
            <summary>
            The file needs to be merged
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderFileMergeState.Merged">
            <summary>
            The file has been merged
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderFileStatusExtended">
            <summary>
            A container class that is returned from GetStatusForAllFiles.  It wraps 
            the return and ref values normally returned from GetStatus on a single file.
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolderOptions">
            <summary>
            This class stores options for working folders
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._storeDataInWorkingFolders">
            <summary>
            When this is false, the hidden folder data will not be stored with inside the working
            folders, but will instead be stored somewhere under the user's application data
            space.  When it is true, the data will be stored in a folder called _sgvault inside
            the working folder.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._requireCheckOutBeforeCheckIn">
            <summary>
            When this is false, Renegade status is never returned for any file, since
            the user does not expect to have to check out files before checking them in.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._makeBackups">
            <summary>
            Whether or not to make backup copies of files that are overwritten.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._defaultLocalCopyType">
            <summary>
            The local copy type used when operations must perform an UndoCheckOut without
            raising a dialog.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._makeWritableAfterCommit">
            <summary>
            The make writable style to use after a commit is done and needs to modify a file
            that was just checked in or added to the repository.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._overrideNativeEOL">
            <summary>
            If not set to none, override the native eol with this type
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._detectModifiedFilesWithCRCs">
            <summary>
            If set to true, IsModified() will use file CRCs instead of mod time to determine
            if a file is modified.  Can make the function much slower, but is very accurate.
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolderOptions._maxFileSizeToCheckWithCRCs">
            <summary>
            If set to a positive number, the size in bytes of the largest file to use a CRC
            check on.  Files larger than this will use the VaultDateTime check.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderOptions.#ctor(System.Boolean,VaultClientOperationsLib.LocalCopyType,VaultClientOperationsLib.MakeWritableType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="requireCheckOutBeforeCheckIn"></param>
            <param name="defaultLocalCopyType"></param>
            <param name="makeWritableAfterCommit"></param>
            <param name="storeDataInWorkingFolders"></param>
            <param name="makeBackups"></param>
            <param name="overrideNativeEOL">Option to override Native EOL.  Use VaultLib.VaultEOLForm.XX to define this parameter.  VaultLib.VaultEOLForm.None is do not override.</param>
            <param name="detectModifiedFilesWithCRCs"></param>
            <param name="maxFileSizeToCheckWithCRCs"></param>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolderOptions.StoreDataInWorkingFolders">
            <summary>
            Whether or not to store data in working folders
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolderOptions.RequireCheckOutBeforeCheckIn">
            <summary>
            Whether or not to require check out before check in
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolderOptions.MakeBackups">
            <summary>
            Whether or not to make backup copies of overwritten files
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolderOptions.DefaultLocalCopyType">
            <summary>
            Gets/Sets the default local copy type
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolderOptions.MakeWritableAfterCommit">
            <summary>
            Gets/Sets the make writable setting to use after a commit
            </summary>
        </member>
        <member name="T:VaultClientOperationsLib.WorkingFolder">
            <summary>
            This class represents the information contained in a working folder.  You can use
            this class to determine the status of a working file.  You can also use it to access
            the cached versions of a file which are stored in the hidden _sgvault folder.
            
            There is no public constructor for WorkingFolder.  To get one of these objects,
            you need to call ClientInstance.GetWorkingFolder().
            </summary>
        </member>
        <member name="F:VaultClientOperationsLib.WorkingFolder._systemmutexTimeout">
            <summary>
            SystemMutex timeout value
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.HasWorkingFolderData(System.String,System.Boolean,VaultClientOperationsLib.TreeCache)">
            <summary>
            Call to determine whether the given disk folder has working folder data.
            The function does not validate the data, but simply looks for the existence
            of the hidden folder files.  The result of this function can be used to
            skip folders that don't have hidden state data.
            </summary>
            <param name="diskFolderPath">The local disk path to check.</param>
            <param name="lookInWorkingFolder">If true, this function will look in the working folder for the hidden folder.  If false, this function will look in the application data place for this folder.</param>
            <param name="treeCache">This must be non-null if lookInWorkingFolder is false.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.#ctor(VaultClientOperationsLib.ClientInstance,System.String,System.Boolean)">
            <summary>
            Do not call this constructor except from within ClientInstance
            </summary>
            <param name="ci"></param>
            <param name="diskFolderPath"></param>
            <param name="makeBackups"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.Dispose">
            <summary>
            Disposes of any resources held by the WorkingFolder object.  Call this when
            done with your instance so the system mutex/semaphore can be freed quickly.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.Exists(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return true iff the working file exists.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.LoadState">
            <summary>
            Cause the working folder to reload its state information.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.MakeWritable(VaultClientOperationsLib.VaultClientFile,VaultClientOperationsLib.MakeWritableType)">
            <summary>
            Make a disk file writable according to the given writable style and mergeability.
            </summary>
            <param name="file">The file to change.</param>
            <param name="makeWritable">The writable style to be set.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.RevertFileToBaseline(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Overwrite the working file with the baseline version.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetBaselineVersion(System.Int64)">
            <summary>
            Return the the object version ID which corresponds to the current baseline version of the given file.
            </summary>
            <param name="ID">The object ID of the file</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetBaselineVersion(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the the object version ID which corresponds to the current baseline version of the given file.
            </summary>
            <param name="file">The file</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetPrevBaselineVersion(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Returns the previous baseline version for the specified file
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetPrevBaselineVersionDisplay(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Returns the displayable version of the specified file's previous baseline version
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetManagedFileCount">
            <summary>
            Returns the number of managed files in the working folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetManagedFilename(VaultClientOperationsLib.VaultClientFile,System.Int64)">
            <summary>
            Returns the full path for the managed file for a specific version of a file.
            </summary>
            <param name="file">The file</param>
            <param name="versionid">The object version ID</param>
            <returns>If the specified version is available, return the path.  Otherwise, return null.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetLatestKnownVersionFilename(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Returns the full path for the managed file for the latest known version of a file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetWorkingFilename(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the full path of the working file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetRepositoryBaselineFilename(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Returns the full path for the managed file for the baseline version of a file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetRepositoryBaselineFilename(System.Int64)">
            <summary>
            Returns the full path for the managed file for the baseline version of a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_Already_Baseline(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the name of the file which was the baseline in the merge
            which already happened.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_Already_Patches(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the name of the file which was the patches file in the merge
            which already happened.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_Already_Working(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the name of the file which was the working file in the merge
            which already happened.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_NeedsMerge_Baseline(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Returns the baseline filename for a merge
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_NeedsMerge_Patches(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the name of the file which was the patches file in the merge
            which already happened.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetMergeFilename_NeedsMerge_Working(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the name of the file which was the working file in the merge
            which already happened.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetDisplayVersion(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Get the user-friendly version number of the baseline for this file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.TemporarilyDeleteFile(System.String,System.Int64)">
            <summary>
            Update the working folder to reflect a pending file delete.
            Removes the file from the working folder.  Call RestoreTemporarilyDeletedFile() to restore it. 
            </summary>
            <param name="fileName"></param>
            <param name="fileID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.RestoreTemporarilyDeletedFile(System.String,System.Int64)">
            <summary>
            Update the working folder to reflect the undo of a pending file delete.
            Restores a file to the working folder that was removed via TemporarilyDeleteFile().
            </summary>
            <param name="fileName"></param>
            <param name="fileID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.CleanupCachePostFileDelete(System.Int64)">
            <summary>
            Removes the cache data relevant to a pending file delete.
            Intended to be called after a file delete is committed.
            </summary>
            <param name="fileID"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.DeleteFile(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Deletes a file from a working folder
            </summary>
            <param name="vcFile">The file to delete</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.MoveManagedFile(System.Int64,VaultClientOperationsLib.WorkingFolder)">
            <summary>
            Notifies appropriate working folders that their contents are changing and moves the relevant state/baseline files.
            </summary>
            <param name="managedFileID"></param>
            <param name="destWorkingFolder"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.ReplaceWorkingFileWith(VaultClientOperationsLib.VaultClientFile,System.String)">
            <summary>
            This is used by the merge branches code for the case where a
            a file in the destination tree has not been modified since
            the branch point.  No file merge is necessary -- the mergebranches
            code simply replaces the working file with the one from
            the src branch.
            </summary>
            <param name="file"></param>
            <param name="strNewFile"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.ResolveMerge_ReplaceWith(VaultClientOperationsLib.VaultClientFile,System.String)">
            <summary>
            Resolve the NeedsMerge status of this file and replace its contents
            with a file which is presumed to have been the result of a
            merge operation.
            </summary>
            <remarks>
            This function seems to be dead code. A find-in-files shows that the
            only place where it's being called from is one isolated place in
            the smoke tests.
            </remarks>
            <param name="file"></param>
            <param name="strMerged"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.ResolveMerge_KeepWorkingCopy(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Resolve the NeedsMerge status and keep the current working copy of the file, ignoring the "other" version (either from the repository or from a merge branch operation).
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.RetrieveLatestVersionForDiffOrMerge(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Fetch a copy of the latest *known* version of the given file to a temp folder.
            If some other user has checked in a newer version, we won't see it until a
            refresh.
            </summary>
            <param name="file">repository object to fetch</param>
            <returns>full path to temp file</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.HasUndoableMerge(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return true iff it is possible to undo a previously performed merge on the given file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.WhatKindOfMergeIsThis(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the KindOfMerge situation in which the given file is sitting.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.CleanupBackupFiles(VaultClientOperationsLib.VaultClientFile,System.String)">
            <summary>
            Removes unwanted backup files.
            </summary>
            <param name="file">The VaultClientFile whose backups are to be pruned.</param>
            <param name="backupFilename">The path to a backup file, used to derive the location of backups for the VaultClientFile.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.CleanupBaselineFiles(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes unwanted baseline files.
            </summary>
            <param name="ID">The ID of the VaultClientFile whose baselines are to be pruned.</param>
            <param name="currentVersion">targetVersion from the preceding call to manage file (in case SetBaseline hasn't been called yet and this will be our baseline version soon).</param>
            <param name="limit">The number of baseline files which should remain after this operation, in addition to the file for the current baseline version and the baseline version that may be current shortly.</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetLocalFolderPath">
            <summary>
            Return the full path of the working folder on the local disk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.HasManagedFile(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Determine if the specified file is being managed by this working folder.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetStatus(VaultClientOperationsLib.VaultClientFile,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Get the status of the working file.
            </summary>
            <param name="file"></param>
            <param name="isModified"></param>
            <param name="exists"></param>
            <param name="strAbsoluteFilename"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetModificationTimeAtLastGet(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the timestamp which was applied to this file the last time it was retrieved from the repository.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.FileAge(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return the age of the baseline version of this file with respect to the repository.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsReallyModified(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return true iff this file has been modified since it was retrieved.  This
            function may do a complete byte compare of the files, so it's very slow.
            </summary>
            <param name="file">The file to check.</param>
            <returns>true if the file has been modified since last get, false if not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsModified(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Return true iff this file has been modified since it was retrieved.
            This function honors the WorkingFolderOptions setting DetectModifiedFilesWithCRCs.
            **NOTE**: Returns true if the file doesn't exist.
            </summary>
            <param name="file">The file to check.</param>
            <returns>true if the file has been modified since last get, false if not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsModified(VaultClientOperationsLib.VaultClientFile,System.Boolean,System.Boolean)">
            <summary>
            Return true iff this file has been modified since it was retrieved.
            If forceCRCCheck is true, the CRC check is always used, else this function 
            honors the WorkingFolderOptions setting DetectModifiedFilesWithCRCs.
            </summary>
            <param name="file">The file to check.</param>
            <param name="forceCRCCheck">If true, a CRC check is always performed, if false the WorkingFolderOptions.DetectModifiedFilesWithCRCs setting is honored.</param>
            <param name="bBiasReturnOnError">Returns this value if an error is enountered in determining whether the file is modified.
            Needed because if we can't determine mod status, the caller should determine what the file status is</param>
            <returns>true if the file has been modified since last get, false if not.</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsCheckedOutExclusiveByAnyone(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out exclusively by anyone
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out exclusively by anyone</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsCheckedOutByAnyone(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out by anyone
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out by anyone</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsCheckedOutByMeOnAnyMachine(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out by the current user
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out by the current user</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsCheckedOutByMeOnThisMachine(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Checks to see if a file is checked out by the current user on the current machine
            </summary>
            <param name="file">The file to check</param>
            <returns>True if the file is checked out by the current user on the current machine</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.IsCheckedOutBySpecificUser(VaultClientOperationsLib.VaultClientFile,System.String,System.String@)">
            <summary>
            Checks to see if the specified file is checked out by the specified user
            </summary>
            <param name="file">The file to check</param>
            <param name="username">The username to check</param>
            <param name="comment">If the file is checked out by this user, returns the check out comment</param>
            <returns>True if the file is checked out by the specified user</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetHiddenFolderName">
            <summary>
            Retrieves the hidden folder name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetOldHiddenFolderName">
            <summary>
            Retrieves the old hidden folder name
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.MakeBackupFilename(System.String,System.String)">
            <summary>
            Constructs the filename to use for backing up a file
            </summary>
            <param name="backupFolderName">Path to the backup folder</param>
            <param name="filename">File name to back up</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.SetComment(VaultClientOperationsLib.VaultClientFile,System.String)">
            <summary>
            Sets the comment for the specified file
            </summary>
            <param name="f">The file</param>
            <param name="comment">The comment to set</param>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.GetComment(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Gets the comment for the specified file
            </summary>
            <param name="f">The file</param>
            <returns>Teh comment set for this file</returns>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolder.RemoveComment(VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Removes the comment from the specified file
            </summary>
            <param name="f">The file</param>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolder.HiddenFolderName">
            <summary>
            Gets the name of the working folder's hidden folder
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolder.BackupFolderName">
            <summary>
            Gets the name of the working folder's backup folder
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolder.IsValid">
            <summary>
            Gets whether this instance is currently valid (the disk data is corresponds to is not newer than the memory data).
            </summary>
        </member>
        <member name="P:VaultClientOperationsLib.WorkingFolder.MakeBackups">
            <summary>
            Gets whether this instance will make backups of files it overwrites in the working folder.
            </summary>
        </member>
        <member name="M:VaultClientOperationsLib.WorkingFolderEx.#ctor(VaultClientOperationsLib.ClientInstance,System.String,System.Boolean)">
            <summary>
            Do not call this constructor except from within ClientInstance
            </summary>
            <param name="ci"></param>
            <param name="diskFolderPath"></param>
            <param name="makeBackups"></param>
        </member>
    </members>
</doc>
